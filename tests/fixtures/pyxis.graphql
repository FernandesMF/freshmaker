"""
This is a public version of the Pyxis GraphQL schema obtained from "https://catalog.redhat.com/api/containers/graphql/" with slight modifications:
1. Added `parent_brew_build` field to ContainerImage.
"""

directive @mongodb_get_original(schema: String, query: String, collection: String, database: String) on FIELD_DEFINITION

directive @mongodb_get_one(schema: String, query: String, collection: String, database: String, fsm_enabled: String) on FIELD_DEFINITION

directive @mongodb_get_one_aggregate(schema: String, query: String, collection: String, database: String, fsm_enabled: String) on FIELD_DEFINITION

directive @mongodb_get_many_paginated(schema: String, query: String, collection: String, database: String, fsm_enabled: String) on FIELD_DEFINITION

directive @mongodb_get_many_paginated_aggregate(schema: String, query: String, collection: String, database: String, fsm_enabled: String) on FIELD_DEFINITION

directive @mongodb_create_one(collection: String, database: String) on FIELD_DEFINITION

directive @mongodb_update_one(query: String, collection: String, database: String) on FIELD_DEFINITION

directive @mongodb_replace_one(query: String, collection: String, database: String) on FIELD_DEFINITION

directive @mongodb_delete_one(query: String, collection: String, database: String) on FIELD_DEFINITION

directive @mongodb_embed_one_to_one(path: String, template: String, query: String, collection: String, database: String) on FIELD_DEFINITION

directive @mongodb_embed_one_to_one_check(path: String, template: String, query: String, collection: String, database: String) on FIELD_DEFINITION

directive @mongodb_embed_one_to_many(path: String, template: String, query: String, collection: String, database: String, path_to_iterated_keys: String) on FIELD_DEFINITION

directive @mongodb_embed_one_to_many_check(path: String, template: String, query: String, collection: String, database: String, path_to_iterated_keys: String) on FIELD_DEFINITION

directive @mongodb_embed_many_to_one(path: String, template: String, query: String, collection: String, database: String) on FIELD_DEFINITION

directive @mongodb_embed_many_to_one_check(path: String, template: String, query: String, collection: String, database: String) on FIELD_DEFINITION

directive @serialize(schema: String, format: String, decrypt: String) on FIELD_DEFINITION

directive @validate(schema: String) on FIELD_DEFINITION

directive @deserialize(schema: String, encrypt: String) on FIELD_DEFINITION

directive @auth_rbac(roles: [String]) on FIELD_DEFINITION

directive @auth_jwt_or_api_key_required on FIELD_DEFINITION

directive @request_started(hide_unencrypted_logs: String) on FIELD_DEFINITION

directive @request_ended(schema: String, hide_unencrypted_logs: String) on FIELD_DEFINITION

directive @data_add_automatic_fields(action: String) on FIELD_DEFINITION

directive @data_compression(schema: String, action: String) on FIELD_DEFINITION

directive @data_decompression(schema: String, format: String) on FIELD_DEFINITION

directive @data_decompression_original(schema: String) on FIELD_DEFINITION

directive @data_auto_fields_payload on FIELD_DEFINITION

directive @data_mock_input on FIELD_DEFINITION

directive @data_load_input on FIELD_DEFINITION

directive @data_load_args on FIELD_DEFINITION

directive @data_merge_original_update on FIELD_DEFINITION

directive @data_merge_original_replace(schema: String) on FIELD_DEFINITION

directive @data_exclude_read_only(schema: String) on FIELD_DEFINITION

directive @pre_validate(functions: [String]) on FIELD_DEFINITION

directive @post_validate(functions: [String]) on FIELD_DEFINITION

directive @pre_write(functions: [String]) on FIELD_DEFINITION

directive @post_write(functions: [String]) on FIELD_DEFINITION

directive @pre_fetch(functions: [String]) on FIELD_DEFINITION

directive @post_fetch(functions: [String]) on FIELD_DEFINITION

directive @post_serialize(functions: [String]) on FIELD_DEFINITION

directive @check_unique_fields(has_to_be_unique: [[String]], collection: String, database: String) on FIELD_DEFINITION

directive @data_retype_argument(name: String, type: String) on FIELD_DEFINITION

directive @data_get_argument_from_parent(path: [String], name: String) on FIELD_DEFINITION

directive @mongodb_transaction_start on FIELD_DEFINITION

directive @mongodb_transaction_end on FIELD_DEFINITION

directive @get_one(url: String) on FIELD_DEFINITION

directive @get_many(url: String) on FIELD_DEFINITION

directive @one_to_many(url: String) on FIELD_DEFINITION

directive @one_to_one(url: String) on FIELD_DEFINITION

directive @delete(url: String) on FIELD_DEFINITION

directive @put(url: String) on FIELD_DEFINITION

directive @patch(url: String) on FIELD_DEFINITION

directive @post(url: String) on FIELD_DEFINITION

directive @edges on FIELD_DEFINITION

type Query {
  """Get basic availability response."""
  get_ping: String

  """
  Get status of services and components on which the GraphQL Pyxis depends on.
  """
  get_status: StatusGQL

  """Get Mongo DB availability response."""
  get_mongo: MongoStatusGQL

  """Get Mongo DB availability response."""
  get_logs: ForwarderStatusResponse

  """Get container image by ID."""
  get_image(id: ObjectIDFilterScalar): ContainerImageResponse

  """Get container images. Exclude total for improved performance."""
  find_images(sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: ContainerImageFilter): ContainerImagePaginatedResponse

  """Get all images by Brew NVR. Exclude total for improved performance."""
  find_images_by_nvr(nvr: String, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: ContainerImageFilter): ContainerImagePaginatedResponse

  """Get container image by manifest digest."""
  get_image_by_manifest_digest_registry_and_repository(registry: String, repository: String, manifest_digest: String): ContainerImageResponse

  """List images for a repository. Exclude total for improved performance."""
  find_repository_images_by_registry_path(registry: String, repository: String, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: ContainerImageFilter): ContainerImagePaginatedResponse

  """List images for a repository + tag."""
  find_repository_images_by_registry_path_tag(registry: String, repository: String, tag: String, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: ContainerImageFilter): ContainerImagePaginatedResponse

  """Get files for an image."""
  find_image_files(id: ObjectIDFilterScalar, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: ContainerFileFilter): ContainerFilePaginatedResponse

  """Get all tag histories. Exclude total for improved performance."""
  find_tag_histories(page: Int = 0, page_size: Int = 50, sort_by: [SortBy], filter: ContainerTagHistoryFilter): ContainerTagHistoryPaginatedResponse

  """Get a tag history by ID."""
  get_tag_history(id: ObjectIDFilterScalar): ContainerTagHistoryResponse

  """Get a tag history by tag name."""
  get_tag_history_by_tag_name(registry: String, repository: String, tag: String): ContainerTagHistoryResponse

  """
  Get images for tag history that have or used to have the tag. Exclude total for improved performance.
  """
  find_tag_history_images(id: ObjectIDFilterScalar, page: Int = 0, page_size: Int = 50, sort_by: [SortBy], filter: ContainerImageFilter): ContainerImagePaginatedResponse

  """Get a certification project image request"""
  get_certification_image_request_by_id(id: ObjectIDFilterScalar): CertProjectImageRequestResponse

  """Get many certification project image requests"""
  get_certification_image_requests(page: Int = 0, page_size: Int = 50, sort_by: [SortBy], filter: CertProjectImageRequestFilter): CertProjectImageRequestPaginatedResponse

  """Get certification project image requests using its cert project ID."""
  get_certification_image_requests_by_cert_project_id(id: ObjectIDFilterScalar, page: Int = 0, page_size: Int = 50, sort_by: [SortBy], filter: CertProjectImageRequestFilter): CertProjectImageRequestPaginatedResponse

  """Get image requests using its image id."""
  get_certification_image_requests_by_image_id(id: ObjectIDFilterScalar, page: Int = 0, page_size: Int = 50, sort_by: [SortBy], filter: CertProjectImageRequestFilter): CertProjectImageRequestPaginatedResponse

  """Get a certification project test result"""
  get_cert_project_test_result(id: ObjectIDFilterScalar): CertProjectTestResultResponse

  """Get many certification project test results by cert project ID"""
  get_cert_project_test_results(id: ObjectIDFilterScalar, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: CertProjectTestResultFilter): CertProjectTestResultPaginatedResponse

  """Get many certification project test results"""
  find_cert_project_test_results_by_id(sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: CertProjectTestResultFilter): CertProjectTestResultPaginatedResponse

  """Get test results by container image id"""
  get_test_results_by_image_id(id: ObjectIDFilterScalar, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: CertProjectTestResultFilter): CertProjectTestResultPaginatedResponse

  """Get a certification project artifact"""
  get_cert_project_artifact(id: ObjectIDFilterScalar): CertProjectArtifactResponse

  """Get a certification project artifacts"""
  get_cert_project_artifacts(id: ObjectIDFilterScalar, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: CertProjectArtifactFilter): CertProjectArtifactPaginatedResponse

  """Get artifacts by container image id"""
  get_certification_artifacts_by_image_id(id: ObjectIDFilterScalar, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: CertProjectArtifactFilter): CertProjectArtifactPaginatedResponse

  """List operator bundles for a repository."""
  find_repository_operator_bundles_by_registry_path(page: Int = 0, page_size: Int = 50, sort_by: [SortBy], registry: String, repository: String, filter: OperatorBundleFilter): OperatorBundlePaginatedResponse

  """Get operator bundles."""
  find_operator_bundles(page: Int = 0, page_size: Int = 50, sort_by: [SortBy], organization: String, ocp_version: String, channel_name: String, package: String, latest_ocp_version: Boolean, filter: OperatorBundleFilter): OperatorBundlePaginatedResponse

  """Get operator package by ID."""
  get_operator_package(id: ObjectIDFilterScalar): OperatorPackageResponse

  """Get a list of operator packages."""
  find_operator_packages(page: Int = 0, page_size: Int = 50, sort_by: [SortBy], filter: OperatorPackageFilter): OperatorPackagePaginatedResponse

  """Get operator index by ID."""
  get_operator_index(id: ObjectIDFilterScalar): OperatorIndexResponse

  """Get a list of operator indexes."""
  find_operator_indices(page: Int = 0, page_size: Int = 50, sort_by: [SortBy], organization: String, ocp_version: String, ocp_versions_range: String, filter: OperatorIndexFilter): OperatorIndexPaginatedResponse

  """
  Get Red Hat advisory by ID.
  You only have access to advisories that are already shipped.
  """
  get_advisory(id: String): RedHatContainerAdvisoryResponse

  """
  Get container Red Hat advisories.
  You only have access to advisories that are already shipped.
  """
  find_advisories(page: Int = 0, page_size: Int = 50, sort_by: [SortBy], filter: RedHatContainerAdvisoryFilter): RedHatContainerAdvisoryPaginatedResponse

  """Find container signature data by index."""
  find_signature_data_by_index(non_zero_index: Int, manifest_digest: String, repository: String, sort_by: [SortBy], filter: ContainerSignatureExternalFilter): ContainerSignatureExternalPaginatedResponse

  """Get an RPM manifest by ID"""
  get_rpm_manifest(id: ObjectIDFilterScalar): ContainerImageRPMManifestResponse

  """Get the RPM manifest for an image"""
  get_image_rpm_manifest(id: String): ContainerImageRPMManifestResponse

  """Get a repository by ID."""
  get_repository(id: ObjectIDFilterScalar): ContainerRepositoryResponse

  """Get all repositories."""
  find_repositories(sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: ContainerRepositoryFilter): ContainerRepositoryPaginatedResponse

  """Get a repository by registry and path (product line/image name)."""
  get_repository_by_registry_path(registry: String, repository: String): ContainerRepositoryResponse

  """Get all repositories belonging to product listing."""
  find_product_listing_repositories(id: ObjectIDFilterScalar, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: ContainerRepositoryFilter): ContainerRepositoryPaginatedResponse

  """Get the certification project for a repository."""
  get_repository_project_certification_by_registry_path(registry: String, repository: String): CertificationProjectResponse

  """Get a vendor by ID."""
  get_vendor(id: ObjectIDFilterScalar): ContainerVendorResponse

  """Get a vendor by Company Org ID."""
  get_vendor_by_org_id(org_id: Int): ContainerVendorResponse

  """Get a vendor by label."""
  get_vendor_by_label(label: String): ContainerVendorResponse

  """Get the vendor for a repository."""
  get_repository_vendor_by_registry_path(registry: String, repository: String): ContainerVendorResponse

  """Get the product listings for a vendor by Company Org ID."""
  find_vendor_product_listings_by_org_id(org_id: Int, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: ProductListingFilter): ProductListingPaginatedResponse

  """Get certification projects for a vendor by Company Org ID."""
  find_vendor_certification_projects_by_org_id(org_id: Int, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: CertificationProjectFilter): CertificationProjectPaginatedResponse

  """Get the repositories for a vendor label."""
  find_vendor_repositories_by_label(label: String, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: ContainerRepositoryFilter): ContainerRepositoryPaginatedResponse

  """Get the product listings for a vendor by label."""
  find_vendor_product_listings_by_label(label: String, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: ProductListingFilter): ProductListingPaginatedResponse

  """Get an image vulnerability by ID."""
  get_image_vulnerability(id: ObjectIDFilterScalar): ContainerImageVulnerabilityResponse

  """
  Get a list of image vulnerabilities associated with an image. Exclude total for improved performance.
  """
  find_image_vulnerabilities(id: String, page: Int = 0, page_size: Int = 50, sort_by: [SortBy], filter: ContainerImageVulnerabilityFilter): ContainerImageVulnerabilityPaginatedResponse

  """Get certification project using its ID."""
  get_certification_project(id: ObjectIDFilterScalar): CertificationProjectResponse

  """Get certification project using Red Hat Connect project ID."""
  get_certification_project_by_pid(pid: String): CertificationProjectResponse

  """Get registry secrets for certification project using its ID."""
  get_registry_secrets_by_certification_id(id: ObjectIDFilterScalar): RegistrySecretsResponse

  """Get product listings for certification project using its ID."""
  find_certification_projects_product_listings(id: ObjectIDFilterScalar, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: ProductListingFilter): ProductListingPaginatedResponse

  """Get container image by ID of associated certification project."""
  find_certification_projects_images(id: ObjectIDFilterScalar, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: ContainerImageFilter): ContainerImagePaginatedResponse

  """Get all product listings."""
  find_product_listings(sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: ProductListingFilter): ProductListingPaginatedResponse

  """Get a product listing."""
  get_product_listing(id: ObjectIDFilterScalar): ProductListingResponse

  """Get all product listings associated with repository."""
  find_repository_product_listings(id: ObjectIDFilterScalar, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: ProductListingFilter): ProductListingPaginatedResponse

  """Get certification projects associated with product listing."""
  find_product_listing_certification_projects(id: ObjectIDFilterScalar, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: CertificationProjectFilter): CertificationProjectPaginatedResponse

  """Find product listings associated with repository."""
  find_repository_product_listings_by_registry_path(registry: String, repository: String, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: ProductListingFilter): ProductListingPaginatedResponse

  """Get a list of API keys associated with the given ORG ID."""
  get_key(org_id: Int): ApiKeyListResponse

  """List container grades for a repository."""
  find_repository_grades_by_registry_path(registry: String, repository: String): ContainerGradesListResponse

  """Get all content manifests."""
  find_content_manifests(sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: ContentManifestFilter): ContentManifestPaginatedResponse

  """Get a content manifest by ID."""
  get_content_manifest(id: ObjectIDFilterScalar): ContentManifestResponse

  """List all content manifest components."""
  find_content_manifest_components(page: Int = 0, page_size: Int = 50, sort_by: [SortBy], filter: ContentManifestComponentFilter): ContentManifestComponentPaginatedResponse

  """Get an content manifest component by ID."""
  get_content_manifest_component(id: ObjectIDFilterScalar): ContentManifestComponentResponse
}

"""
Status object of services and components on which the GraphQL Pyxis depends on.
"""
type StatusGQL {
  pyxis_rest: Boolean
}

"""Status of mongoDB databases Pyxis depends on."""
type MongoStatusGQL {
  mongodb_databases: [MongoDBStatus]
}

"""Status object for a mongoDB database"""
type MongoDBStatus {
  """Name of the database"""
  name: String

  """Indicates if database can be reached."""
  reachable: Boolean
}

type ForwarderStatusResponse {
  data: ForwarderStatus
  error: ResponseError
}

""""""
type ForwarderStatus {
  forwarders: Forwarders
}

"""Object with all log forwarder statuses"""
type Forwarders {
  fluentd: ForwarderStatusInfo
}

"""Splunk forwarder status information"""
type ForwarderStatusInfo {
  """Forwarder status"""
  status: Boolean
}

type ResponseError {
  status: Int
  detail: String
}

type ContainerImageResponse {
  data: ContainerImage
  error: ResponseError
}

"""Metadata about images contained in RedHat and ISV repositories"""
type ContainerImage {
  """
  The field contains an architecture for which the container image was built for. Value is used to distinguish between the default x86-64 architecture and other architectures. If the value is not set, the image was built for the x86-64 architecture.
  """
  architecture: String

  """Brew related metadata."""
  brew: Brew

  """
  Indication that image was created by the CPaaS managed service pipeline.
  """
  cloud_service: Boolean
  certifications: [Certification] @deprecated(reason: "The field is no longer supported. Certification test results were moved to test-results endpoint.")

  """Subset of data from contentManifest."""
  content_manifest: ContainerImageContentManifest

  """
  Subset of data from components that belong to associated content manifest.
  """
  content_manifest_components: [ContainerImageContentManifestComponent]

  """
  A list of all content sets (YUM repositories) from where an image RPM content is.
  """
  content_sets: [String]

  """
  A mapping of applicable advisories to RPM NEVRA. This data is required for scoring.
  """
  cpe_ids: [String]

  """
  A mapping of applicable advisories for the base_images from the Red Hat repositories.
  """
  cpe_ids_rh_base_images: [String]

  """
  Docker Image Digest. For Docker 1.10+ this is also known as the 'manifest digest'.
  """
  docker_image_digest: String

  """
  Docker Image ID. For Docker 1.10+ this is also known as the 'config digest'.
  """
  docker_image_id: String

  """
  The grade based on applicable updates and time provided by PST CVE engine.
  """
  freshness_grades: [FreshnessGrade]
  object_type: String

  """
  Data parsed from image metadata.
  These fields are not computed from any other source.
  """
  parsed_data: ParsedData

  """Published repositories associated with the container image."""
  repositories: [ContainerImageRepo]

  """
  The certification scan status. The field is generated based on certification info and it can't be used in query filter.
  """
  scan_status: String @deprecated(reason: "The field is no longer supported.")

  """Indication if the image was certified."""
  certified: Boolean

  """
  Indicates that an image was removed. Only unpublished images can be removed.
  """
  deleted: Boolean

  """
  Image manifest digest.
  Be careful, as this value is not unique among container image entries, as one image can be references several times.
  """
  image_id: String

  """
  ID of the project in for ISV repositories. The ID can be also used to connect vendor to the image.
  """
  isv_pid: String

  """
  The total size of the sum of all layers for each image in bytes. This is computed externally and may not match what is reported by the image metadata (see parsed_data.size).
  """
  sum_layer_size_bytes: Int64

  """Field for multiarch primary key"""
  top_layer_id: String

  """
  Hash (sha256) of the uncompressed top layer for this image (should be same value as - parsed_data.uncompressed_layer_sizes.0.layer_id)
  """
  uncompressed_top_layer_id: String

  """Raw image configuration, such as output from docker inspect."""
  raw_config: String

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime
  edges: ContainerImageEdges

  """A reference to the parent image."""
  parent_brew_build: String
}

"""Brew Build System related metadata."""
type Brew {
  """Unique and immutable Brew build ID."""
  build: String

  """Timestamp from Brew when the image has been succesfully built."""
  completion_date: DateTime

  """Multi-Arch primary key."""
  nvra: String

  """A package name in Brew."""
  package: String
}

scalar DateTime

""""""
type Certification {
  assessment: [Assessment]
}

""""""
type Assessment {
  """Assesment name."""
  name: String

  """Indicates if the assessment is required for certification."""
  required_for_certification: Boolean

  """Indicates if the assesment was passed, True means yes."""
  value: Boolean
}

"""Subset of data from contentManifest."""
type ContainerImageContentManifest {
  """ID of the contentManifest."""
  _id: ObjectID
}

scalar ObjectID

"""Subset of contentManifestComponent."""
type ContainerImageContentManifestComponent {
  """ID of the contentManifestComponent."""
  _id: ObjectID

  """ContentManifestComponent type."""
  type: String

  """Name of the contentManifestComponent."""
  name: String

  """Version of the contentManifestComponent."""
  version: String

  """Package URL of the contentManifestComponent."""
  purl: String
}

"""Grade based on applicable updates and time provided by PST CVE engine."""
type FreshnessGrade {
  """
  Date after which the grade is no longer valid. See start_date for when the grade was effective. If no value is set, the grade applies forever. This should happen only for a grade of A (no vulnerabilities) or grade F.
  """
  end_date: DateTime

  """The grade."""
  grade: String

  """Date when the grade was added by the vulnerability engine."""
  creation_date: DateTime

  """
  Date from which the grade is in effect. The grade is effective until the end_date, if end_date is set.
  """
  start_date: DateTime
}

""""""
type ParsedData {
  architecture: String
  author: String
  command: String
  comment: String
  container: String

  """
  The 'created' date reported by image metadata. Stored as String because we do not have control on that format.
  """
  created: String
  docker_image_digest: String
  docker_image_id: String

  """Version of docker reported by 'docker inspect' for this image."""
  docker_version: String
  env_variables: [String]
  image_id: String
  labels: [Label]

  """Layer digests from the image."""
  layers: [String]
  os: String
  ports: String

  """Repositories defined within an image as reported by yum command."""
  repos: [ParsedDataRepo]

  """Size of this image as reported by image metadata."""
  size: Int64

  """Information about uncompressed layer sizes."""
  uncompressed_layer_sizes: [UncompressedLayerSize]

  """Uncompressed images size in bytes (sum of uncompressed layers size)."""
  uncompressed_size_bytes: Int64

  """The user on the images."""
  user: String

  """Virtual size of this image as reported by image metadata."""
  virtual_size: Int64
}

"""Image label."""
type Label {
  """The name of the label"""
  name: String

  """Value of the label."""
  value: String
}

""""""
type ParsedDataRepo {
  baseurl: String
  expire: String
  filename: String
  id: String
  name: String
  pkgs: String
  size: String
  updated: String
}

scalar Int64

""""""
type UncompressedLayerSize {
  """The SHA256 layer ID."""
  layer_id: String

  """The uncompressed layer size in bytes."""
  size_bytes: Int64
}

""""""
type ContainerImageRepo {
  """Store information about image comparison."""
  comparison: ContainerImageRepoComparison

  """
  The _id's of the redHatContainerAdvisory that contains the content advisories.
  """
  content_advisory_ids: [String]

  """
  The _id of the redHatContainerAdvisory that contains the image advisory.
  """
  image_advisory_id: String

  """Available for multiarch images."""
  manifest_list_digest: String

  """Available for single arch images."""
  manifest_schema2_digest: String

  """Indicate if the image has been published to the container catalog."""
  published: Boolean

  """Date the image was published to the container catalog."""
  published_date: DateTime

  """
  When the image was pushed to this repository. For RH images this is picked from first found of advisory ship_date, brew completion_date, and finally repositories publish_date. For ISV images this TBD but is probably going to be only sourced from publish_date but could come from parsed_data.created.
  """
  push_date: DateTime

  """Hostname of the registry where the repository can be accessed."""
  registry: String

  """Repository name."""
  repository: String

  """Image signing info."""
  signatures: [SignatureInfo]

  """List of container tags assigned to this layer."""
  tags: [ContainerImageRepoTag]
  edges: ContainerImageRepoEdges
}

""""""
type ContainerImageRepoComparison {
  """Mapping of a NVRA to multiple advisories IDs."""
  advisory_rpm_mapping: [ContainerImageRepoComparisonMapping]

  """Reason why 'with_nvr' is or is not null."""
  reason: String

  """Human readable reason."""
  reason_text: String

  """List of rpms grouped by category (new, remove, upgrade, downgrade)."""
  rpms: ContainerImageRepoComparisonRPMs

  """NVR of image which this image was compared with."""
  with_nvr: String
}

""""""
type ContainerImageRepoComparisonMapping {
  """Content advisory ID."""
  advisory_ids: [String]

  """NVRA of the RPM related to advisories."""
  nvra: String
}

""""""
type ContainerImageRepoComparisonRPMs {
  """List of NVRA which were downgraded in this image."""
  downgrade: [String]

  """List of NVRA which were added to this image."""
  new: [String]

  """List of NVRA which were removed in this image."""
  remove: [String]

  """List of NVRA which were upgraded in this image."""
  upgrade: [String]
}

""""""
type SignatureInfo {
  """The long 16-byte gpg key id."""
  key_long_id: String

  """List of image tags that are signed with the given key."""
  tags: [String]
}

""""""
type ContainerImageRepoTag {
  added_date: DateTime

  """Available when manifest_schema2_digest is not. All legacy images."""
  manifest_schema1_digest: String

  """The name of the tag."""
  name: String

  """
  Date this tag was removed from the image in this repo. If the tag is added back, add a new entry in 'tags' array.
  """
  removed_date: DateTime
  edges: ContainerImageRepoTagEdges
}

type ContainerImageRepoTagEdges {
  tag_history: ContainerTagHistoryResponse
}

type ContainerTagHistoryResponse {
  data: ContainerTagHistory
  error: ResponseError
}

"""
The tag history stores a list of image that still have or used to have the given tag
"""
type ContainerTagHistory {
  object_type: String

  """Hostname of the registry where the repository can be accessed."""
  registry: String

  """Repository name."""
  repository: String

  """The image tag name."""
  tag: String

  """The tag type i.e. for floating or persistent."""
  tag_type: String

  """Array with the tag history information."""
  history: [History]

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime
  edges: ContainerTagHistoryEdges
}

"""Array with the tag history information."""
type History {
  """Unique immutable build identifier in the brew build system."""
  brew_build: String
  end_date: DateTime

  """The date for when the tag for the given docker_image_digest starts."""
  start_date: DateTime
}

type ContainerTagHistoryEdges {
  images(page_size: Int = 50, page: Int = 0, filter: ContainerImageFilter, sort_by: [SortBy]): ContainerImagePaginatedResponse
}

type ContainerImagePaginatedResponse {
  data: [ContainerImage]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

input ContainerImageFilter {
  eq: NULL
  ne: NULL
  architecture: StringFilter
  brew: BrewFilter
  cloud_service: BooleanFilter
  certifications_size: IntFilter
  certifications_elemMatch: CertificationElemMatchFilter
  certifications: CertificationListFilter
  content_manifest: ContainerImageContentManifestFilter
  content_manifest_components_size: IntFilter
  content_manifest_components_elemMatch: ContainerImageContentManifestComponentElemMatchFilter
  content_manifest_components: ContainerImageContentManifestComponentListFilter
  content_sets_size: IntFilter
  content_sets: StringListFilter
  cpe_ids_size: IntFilter
  cpe_ids: StringListFilter
  cpe_ids_rh_base_images_size: IntFilter
  cpe_ids_rh_base_images: StringListFilter
  docker_image_digest: StringFilter
  docker_image_id: StringFilter
  freshness_grades_size: IntFilter
  freshness_grades_elemMatch: FreshnessGradeElemMatchFilter
  freshness_grades: FreshnessGradeListFilter
  object_type: StringFilter
  parsed_data: ParsedDataFilter
  repositories_size: IntFilter
  repositories_elemMatch: ContainerImageRepoElemMatchFilter
  repositories: ContainerImageRepoListFilter
  scan_status: StringFilter
  certified: BooleanFilter
  deleted: BooleanFilter
  image_id: StringFilter
  isv_pid: StringFilter
  sum_layer_size_bytes: Int64Filter
  top_layer_id: StringFilter
  uncompressed_top_layer_id: StringFilter
  raw_config: StringFilter
  _id: ObjectIDFilter
  creation_date: DateTimeFilter
  last_update_date: DateTimeFilter
  and: [ContainerImageFilter]
  or: [ContainerImageFilter]
  nor: [ContainerImageFilter]
  not: ContainerImageFilter
}

scalar NULL

input StringFilter {
  eq: String
  ne: String
  le: String
  lt: String
  ge: String
  gt: String
  in: [String]
  out: [String]
  all: [String]
  iregex: String
  regex: String
}

input BrewFilter {
  eq: NULL
  ne: NULL
  build: StringFilter
  completion_date: DateTimeFilter
  nvra: StringFilter
  package: StringFilter
  and: [BrewFilter]
  or: [BrewFilter]
  nor: [BrewFilter]
  not: BrewFilter
}

input DateTimeFilter {
  eq: DateTimeFilterScalar
  ne: DateTimeFilterScalar
  le: DateTimeFilterScalar
  lt: DateTimeFilterScalar
  ge: DateTimeFilterScalar
  gt: DateTimeFilterScalar
  in: [DateTimeFilterScalar]
  out: [DateTimeFilterScalar]
}

scalar DateTimeFilterScalar

input BooleanFilter {
  eq: Boolean
  ne: Boolean
}

input IntFilter {
  eq: Int
  ne: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  in: [Int]
  out: [Int]
}

input CertificationElemMatchFilter {
  and: [CertificationFilter]
  or: [CertificationFilter]
  nor: [CertificationFilter]
  not: CertificationFilter
}

input CertificationFilter {
  eq: NULL
  ne: NULL
  assessment_size: IntFilter
  assessment_elemMatch: AssessmentElemMatchFilter
  assessment: AssessmentListFilter
  and: [CertificationFilter]
  or: [CertificationFilter]
  nor: [CertificationFilter]
  not: CertificationFilter
}

input AssessmentElemMatchFilter {
  and: [AssessmentFilter]
  or: [AssessmentFilter]
  nor: [AssessmentFilter]
  not: AssessmentFilter
}

input AssessmentFilter {
  eq: NULL
  ne: NULL
  name: StringFilter
  required_for_certification: BooleanFilter
  value: BooleanFilter
  and: [AssessmentFilter]
  or: [AssessmentFilter]
  nor: [AssessmentFilter]
  not: AssessmentFilter
}

input AssessmentListFilter {
  list_index_filter: AssessmentListIndexFilter
  eq: NULL
  ne: NULL
  name: StringFilter
  required_for_certification: BooleanFilter
  value: BooleanFilter
  and: [AssessmentFilter]
  or: [AssessmentFilter]
  nor: [AssessmentFilter]
  not: AssessmentFilter
}

input AssessmentListIndexFilter {
  condition: AssessmentFilter
  index: Int
}

input CertificationListFilter {
  list_index_filter: CertificationListIndexFilter
  eq: NULL
  ne: NULL
  assessment_size: IntFilter
  assessment_elemMatch: AssessmentElemMatchFilter
  assessment: AssessmentListFilter
  and: [CertificationFilter]
  or: [CertificationFilter]
  nor: [CertificationFilter]
  not: CertificationFilter
}

input CertificationListIndexFilter {
  condition: CertificationFilter
  index: Int
}

input ContainerImageContentManifestFilter {
  eq: NULL
  ne: NULL
  _id: ObjectIDFilter
  and: [ContainerImageContentManifestFilter]
  or: [ContainerImageContentManifestFilter]
  nor: [ContainerImageContentManifestFilter]
  not: ContainerImageContentManifestFilter
}

input ObjectIDFilter {
  eq: ObjectIDFilterScalar
  ne: ObjectIDFilterScalar
  le: ObjectIDFilterScalar
  lt: ObjectIDFilterScalar
  ge: ObjectIDFilterScalar
  gt: ObjectIDFilterScalar
  in: [ObjectIDFilterScalar]
  out: [ObjectIDFilterScalar]
}

scalar ObjectIDFilterScalar

input ContainerImageContentManifestComponentElemMatchFilter {
  and: [ContainerImageContentManifestComponentFilter]
  or: [ContainerImageContentManifestComponentFilter]
  nor: [ContainerImageContentManifestComponentFilter]
  not: ContainerImageContentManifestComponentFilter
}

input ContainerImageContentManifestComponentFilter {
  eq: NULL
  ne: NULL
  _id: ObjectIDFilter
  type: StringFilter
  name: StringFilter
  version: StringFilter
  purl: StringFilter
  and: [ContainerImageContentManifestComponentFilter]
  or: [ContainerImageContentManifestComponentFilter]
  nor: [ContainerImageContentManifestComponentFilter]
  not: ContainerImageContentManifestComponentFilter
}

input ContainerImageContentManifestComponentListFilter {
  list_index_filter: ContainerImageContentManifestComponentListIndexFilter
  eq: NULL
  ne: NULL
  _id: ObjectIDFilter
  type: StringFilter
  name: StringFilter
  version: StringFilter
  purl: StringFilter
  and: [ContainerImageContentManifestComponentFilter]
  or: [ContainerImageContentManifestComponentFilter]
  nor: [ContainerImageContentManifestComponentFilter]
  not: ContainerImageContentManifestComponentFilter
}

input ContainerImageContentManifestComponentListIndexFilter {
  condition: ContainerImageContentManifestComponentFilter
  index: Int
}

input StringListFilter {
  list_index_filter: StringListIndexFilter
  eq: String
  ne: String
  le: String
  lt: String
  ge: String
  gt: String
  in: [String]
  out: [String]
  all: [String]
  iregex: String
  regex: String
}

input StringListIndexFilter {
  condition: StringFilter
  index: Int
}

input FreshnessGradeElemMatchFilter {
  and: [FreshnessGradeFilter]
  or: [FreshnessGradeFilter]
  nor: [FreshnessGradeFilter]
  not: FreshnessGradeFilter
}

input FreshnessGradeFilter {
  eq: NULL
  ne: NULL
  end_date: DateTimeFilter
  grade: StringFilter
  creation_date: DateTimeFilter
  start_date: DateTimeFilter
  and: [FreshnessGradeFilter]
  or: [FreshnessGradeFilter]
  nor: [FreshnessGradeFilter]
  not: FreshnessGradeFilter
}

input FreshnessGradeListFilter {
  list_index_filter: FreshnessGradeListIndexFilter
  eq: NULL
  ne: NULL
  end_date: DateTimeFilter
  grade: StringFilter
  creation_date: DateTimeFilter
  start_date: DateTimeFilter
  and: [FreshnessGradeFilter]
  or: [FreshnessGradeFilter]
  nor: [FreshnessGradeFilter]
  not: FreshnessGradeFilter
}

input FreshnessGradeListIndexFilter {
  condition: FreshnessGradeFilter
  index: Int
}

input ParsedDataFilter {
  eq: NULL
  ne: NULL
  architecture: StringFilter
  author: StringFilter
  command: StringFilter
  comment: StringFilter
  container: StringFilter
  created: StringFilter
  docker_image_digest: StringFilter
  docker_image_id: StringFilter
  docker_version: StringFilter
  env_variables_size: IntFilter
  env_variables: StringListFilter
  image_id: StringFilter
  labels_size: IntFilter
  labels_elemMatch: LabelElemMatchFilter
  labels: LabelListFilter
  layers_size: IntFilter
  layers: StringListFilter
  os: StringFilter
  ports: StringFilter
  repos_size: IntFilter
  repos_elemMatch: ParsedDataRepoElemMatchFilter
  repos: ParsedDataRepoListFilter
  size: Int64Filter
  uncompressed_layer_sizes_size: IntFilter
  uncompressed_layer_sizes_elemMatch: UncompressedLayerSizeElemMatchFilter
  uncompressed_layer_sizes: UncompressedLayerSizeListFilter
  uncompressed_size_bytes: Int64Filter
  user: StringFilter
  virtual_size: Int64Filter
  and: [ParsedDataFilter]
  or: [ParsedDataFilter]
  nor: [ParsedDataFilter]
  not: ParsedDataFilter
}

input LabelElemMatchFilter {
  and: [LabelFilter]
  or: [LabelFilter]
  nor: [LabelFilter]
  not: LabelFilter
}

input LabelFilter {
  eq: NULL
  ne: NULL
  name: StringFilter
  value: StringFilter
  and: [LabelFilter]
  or: [LabelFilter]
  nor: [LabelFilter]
  not: LabelFilter
}

input LabelListFilter {
  list_index_filter: LabelListIndexFilter
  eq: NULL
  ne: NULL
  name: StringFilter
  value: StringFilter
  and: [LabelFilter]
  or: [LabelFilter]
  nor: [LabelFilter]
  not: LabelFilter
}

input LabelListIndexFilter {
  condition: LabelFilter
  index: Int
}

input ParsedDataRepoElemMatchFilter {
  and: [ParsedDataRepoFilter]
  or: [ParsedDataRepoFilter]
  nor: [ParsedDataRepoFilter]
  not: ParsedDataRepoFilter
}

input ParsedDataRepoFilter {
  eq: NULL
  ne: NULL
  baseurl: StringFilter
  expire: StringFilter
  filename: StringFilter
  id: StringFilter
  name: StringFilter
  pkgs: StringFilter
  size: StringFilter
  updated: StringFilter
  and: [ParsedDataRepoFilter]
  or: [ParsedDataRepoFilter]
  nor: [ParsedDataRepoFilter]
  not: ParsedDataRepoFilter
}

input ParsedDataRepoListFilter {
  list_index_filter: ParsedDataRepoListIndexFilter
  eq: NULL
  ne: NULL
  baseurl: StringFilter
  expire: StringFilter
  filename: StringFilter
  id: StringFilter
  name: StringFilter
  pkgs: StringFilter
  size: StringFilter
  updated: StringFilter
  and: [ParsedDataRepoFilter]
  or: [ParsedDataRepoFilter]
  nor: [ParsedDataRepoFilter]
  not: ParsedDataRepoFilter
}

input ParsedDataRepoListIndexFilter {
  condition: ParsedDataRepoFilter
  index: Int
}

input Int64Filter {
  eq: Int64
  ne: Int64
  le: Int64
  lt: Int64
  ge: Int64
  gt: Int64
  in: [Int64]
  out: [Int64]
}

input UncompressedLayerSizeElemMatchFilter {
  and: [UncompressedLayerSizeFilter]
  or: [UncompressedLayerSizeFilter]
  nor: [UncompressedLayerSizeFilter]
  not: UncompressedLayerSizeFilter
}

input UncompressedLayerSizeFilter {
  eq: NULL
  ne: NULL
  layer_id: StringFilter
  size_bytes: Int64Filter
  and: [UncompressedLayerSizeFilter]
  or: [UncompressedLayerSizeFilter]
  nor: [UncompressedLayerSizeFilter]
  not: UncompressedLayerSizeFilter
}

input UncompressedLayerSizeListFilter {
  list_index_filter: UncompressedLayerSizeListIndexFilter
  eq: NULL
  ne: NULL
  layer_id: StringFilter
  size_bytes: Int64Filter
  and: [UncompressedLayerSizeFilter]
  or: [UncompressedLayerSizeFilter]
  nor: [UncompressedLayerSizeFilter]
  not: UncompressedLayerSizeFilter
}

input UncompressedLayerSizeListIndexFilter {
  condition: UncompressedLayerSizeFilter
  index: Int
}

input ContainerImageRepoElemMatchFilter {
  and: [ContainerImageRepoFilter]
  or: [ContainerImageRepoFilter]
  nor: [ContainerImageRepoFilter]
  not: ContainerImageRepoFilter
}

input ContainerImageRepoFilter {
  eq: NULL
  ne: NULL
  comparison: ContainerImageRepoComparisonFilter
  content_advisory_ids_size: IntFilter
  content_advisory_ids: StringListFilter
  image_advisory_id: StringFilter
  manifest_list_digest: StringFilter
  manifest_schema2_digest: StringFilter
  published: BooleanFilter
  published_date: DateTimeFilter
  push_date: DateTimeFilter
  registry: StringFilter
  repository: StringFilter
  signatures_size: IntFilter
  signatures_elemMatch: SignatureInfoElemMatchFilter
  signatures: SignatureInfoListFilter
  tags_size: IntFilter
  tags_elemMatch: ContainerImageRepoTagElemMatchFilter
  tags: ContainerImageRepoTagListFilter
  and: [ContainerImageRepoFilter]
  or: [ContainerImageRepoFilter]
  nor: [ContainerImageRepoFilter]
  not: ContainerImageRepoFilter
}

input ContainerImageRepoComparisonFilter {
  eq: NULL
  ne: NULL
  advisory_rpm_mapping_size: IntFilter
  advisory_rpm_mapping_elemMatch: ContainerImageRepoComparisonMappingElemMatchFilter
  advisory_rpm_mapping: ContainerImageRepoComparisonMappingListFilter
  reason: StringFilter
  reason_text: StringFilter
  rpms: ContainerImageRepoComparisonRPMsFilter
  with_nvr: StringFilter
  and: [ContainerImageRepoComparisonFilter]
  or: [ContainerImageRepoComparisonFilter]
  nor: [ContainerImageRepoComparisonFilter]
  not: ContainerImageRepoComparisonFilter
}

input ContainerImageRepoComparisonMappingElemMatchFilter {
  and: [ContainerImageRepoComparisonMappingFilter]
  or: [ContainerImageRepoComparisonMappingFilter]
  nor: [ContainerImageRepoComparisonMappingFilter]
  not: ContainerImageRepoComparisonMappingFilter
}

input ContainerImageRepoComparisonMappingFilter {
  eq: NULL
  ne: NULL
  advisory_ids_size: IntFilter
  advisory_ids: StringListFilter
  nvra: StringFilter
  and: [ContainerImageRepoComparisonMappingFilter]
  or: [ContainerImageRepoComparisonMappingFilter]
  nor: [ContainerImageRepoComparisonMappingFilter]
  not: ContainerImageRepoComparisonMappingFilter
}

input ContainerImageRepoComparisonMappingListFilter {
  list_index_filter: ContainerImageRepoComparisonMappingListIndexFilter
  eq: NULL
  ne: NULL
  advisory_ids_size: IntFilter
  advisory_ids: StringListFilter
  nvra: StringFilter
  and: [ContainerImageRepoComparisonMappingFilter]
  or: [ContainerImageRepoComparisonMappingFilter]
  nor: [ContainerImageRepoComparisonMappingFilter]
  not: ContainerImageRepoComparisonMappingFilter
}

input ContainerImageRepoComparisonMappingListIndexFilter {
  condition: ContainerImageRepoComparisonMappingFilter
  index: Int
}

input ContainerImageRepoComparisonRPMsFilter {
  eq: NULL
  ne: NULL
  downgrade_size: IntFilter
  downgrade: StringListFilter
  new_size: IntFilter
  new: StringListFilter
  remove_size: IntFilter
  remove: StringListFilter
  upgrade_size: IntFilter
  upgrade: StringListFilter
  and: [ContainerImageRepoComparisonRPMsFilter]
  or: [ContainerImageRepoComparisonRPMsFilter]
  nor: [ContainerImageRepoComparisonRPMsFilter]
  not: ContainerImageRepoComparisonRPMsFilter
}

input SignatureInfoElemMatchFilter {
  and: [SignatureInfoFilter]
  or: [SignatureInfoFilter]
  nor: [SignatureInfoFilter]
  not: SignatureInfoFilter
}

input SignatureInfoFilter {
  eq: NULL
  ne: NULL
  key_long_id: StringFilter
  tags_size: IntFilter
  tags: StringListFilter
  and: [SignatureInfoFilter]
  or: [SignatureInfoFilter]
  nor: [SignatureInfoFilter]
  not: SignatureInfoFilter
}

input SignatureInfoListFilter {
  list_index_filter: SignatureInfoListIndexFilter
  eq: NULL
  ne: NULL
  key_long_id: StringFilter
  tags_size: IntFilter
  tags: StringListFilter
  and: [SignatureInfoFilter]
  or: [SignatureInfoFilter]
  nor: [SignatureInfoFilter]
  not: SignatureInfoFilter
}

input SignatureInfoListIndexFilter {
  condition: SignatureInfoFilter
  index: Int
}

input ContainerImageRepoTagElemMatchFilter {
  and: [ContainerImageRepoTagFilter]
  or: [ContainerImageRepoTagFilter]
  nor: [ContainerImageRepoTagFilter]
  not: ContainerImageRepoTagFilter
}

input ContainerImageRepoTagFilter {
  eq: NULL
  ne: NULL
  added_date: DateTimeFilter
  manifest_schema1_digest: StringFilter
  name: StringFilter
  removed_date: DateTimeFilter
  and: [ContainerImageRepoTagFilter]
  or: [ContainerImageRepoTagFilter]
  nor: [ContainerImageRepoTagFilter]
  not: ContainerImageRepoTagFilter
}

input ContainerImageRepoTagListFilter {
  list_index_filter: ContainerImageRepoTagListIndexFilter
  eq: NULL
  ne: NULL
  added_date: DateTimeFilter
  manifest_schema1_digest: StringFilter
  name: StringFilter
  removed_date: DateTimeFilter
  and: [ContainerImageRepoTagFilter]
  or: [ContainerImageRepoTagFilter]
  nor: [ContainerImageRepoTagFilter]
  not: ContainerImageRepoTagFilter
}

input ContainerImageRepoTagListIndexFilter {
  condition: ContainerImageRepoTagFilter
  index: Int
}

input ContainerImageRepoListFilter {
  list_index_filter: ContainerImageRepoListIndexFilter
  eq: NULL
  ne: NULL
  comparison: ContainerImageRepoComparisonFilter
  content_advisory_ids_size: IntFilter
  content_advisory_ids: StringListFilter
  image_advisory_id: StringFilter
  manifest_list_digest: StringFilter
  manifest_schema2_digest: StringFilter
  published: BooleanFilter
  published_date: DateTimeFilter
  push_date: DateTimeFilter
  registry: StringFilter
  repository: StringFilter
  signatures_size: IntFilter
  signatures_elemMatch: SignatureInfoElemMatchFilter
  signatures: SignatureInfoListFilter
  tags_size: IntFilter
  tags_elemMatch: ContainerImageRepoTagElemMatchFilter
  tags: ContainerImageRepoTagListFilter
  and: [ContainerImageRepoFilter]
  or: [ContainerImageRepoFilter]
  nor: [ContainerImageRepoFilter]
  not: ContainerImageRepoFilter
}

input ContainerImageRepoListIndexFilter {
  condition: ContainerImageRepoFilter
  index: Int
}

input SortBy {
  field: String
  order: SortDirectionEnum
}

enum SortDirectionEnum {
  ASC
  DESC
}

type ContainerImageRepoEdges {
  image_advisory: RedHatContainerAdvisoryResponse
  repository: ContainerRepositoryResponse
}

type RedHatContainerAdvisoryResponse {
  data: RedHatContainerAdvisory
  error: ResponseError
}

"""Advisory associated with RH container image."""
type RedHatContainerAdvisory {
  """MongoDB unique _id"""
  _id: String

  """The content type of advisory. i.e. for CONTAINER or RPM."""
  content_type: String

  """Advisory description."""
  description: String
  object_type: String

  """Severity of the advisory."""
  severity: String

  """The date the image advisory shipped."""
  ship_date: DateTime

  """The solution of the advisory."""
  solution: String

  """Short summary of the advisory."""
  synopsis: String

  """Topic of the advisory."""
  topic: String

  """The type of advisory. i.e. for RHSA:2016-1001 the type is 'RHSA'."""
  type: String

  """Array of CVEs fixed by this advisory."""
  cves: [CVE]

  """Array of issues fixed by this advisory."""
  issues: [Issue]

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime
}

"""CVE fixed by an advisory."""
type CVE {
  """Unique identifier of the issue in the issue tracking system."""
  id: String

  """Publicly accessible URL of the issue information."""
  url: URI
}

scalar URI

"""Issue fixed by an advisory."""
type Issue {
  """Unique identifier of the issue in the issue tracking system."""
  id: String

  """Hostname of the issue tracking system used."""
  issue_tracker: String

  """Publicly accessible URL of the issue information."""
  url: URI
}

type ContainerRepositoryResponse {
  data: ContainerRepository
  error: ResponseError
}

"""Contains metadata associated with Red Hat and ISV repositories"""
type ContainerRepository {
  """The application categories (types)."""
  application_categories: [String]

  """
  Contains unique list of all container architectures for the given repository.
  """
  architectures: [String]

  """Denote which tags to be used for auto-rebuilding processes."""
  auto_rebuild_tags: [String]

  """Flag indicating whether the repository is still beta or not."""
  beta: Boolean @deprecated(reason: "Deprecated")

  """
  What build categories does this fall into, such as standalone, s2i builder, etc.
  """
  build_categories: [String]

  """
  Flag indicating whether the repository has opted-in to auto-release auto-built images.
  """
  can_auto_release_cve_rebuild: Boolean
  cdn_base_url: URI

  """
  To provide customers information which yum repos to enable ability to update the container content.
  """
  content_sets: [String] @deprecated(reason: "Use containerImage.content_sets instead.")

  """
  Capture and provide an inventory of grades corresponding to the tags in the relevant contents stream.
  """
  content_stream_grades: [RepositoryContentStreamGrades]

  """
  Capture and provide an inventory of tags corresponding to the content streams.
  """
  content_stream_tags: [String]

  """Flag indicating whether the repository is still supported or not."""
  deprecated: Boolean @deprecated(reason: "Deprecated")

  """Description of the repository."""
  description: String
  display_data: RepositoryDisplayData

  """
  Links to marketing and doc collateral including categorization (solution brief, white paper, demo video, etc.) supposed to be displayed on the product page (NOT documentation tab on image overview tab).
  """
  documentation_links: [RepositoryDocumentationLink]

  """Flag indicating which team has opted-in to use the File Based Catalog."""
  fbc_opt_in: Boolean
  eol_date: DateTime

  """Date until the freshness grades for this repository are unknown."""
  freshness_grades_unknown_until_date: DateTime

  """Defines  whether a repository contains multiple image streams."""
  includes_multiple_content_streams: Boolean

  """Designates whether a repository is community-supported."""
  is_community_supported: Boolean

  """ID of the project in for ISV repositories."""
  isv_pid: String

  """
  Manually overridden label values.  When set, should be taken instead of label set on the image.
  """
  label_override: RepositoryLabelOverride @deprecated(reason: "Deprecated")

  """
  Determine what registry should be used as source of repository metadata (e.g. Pulp or Quay).
  """
  metadata_source: String

  """Set of metrics about the repository."""
  metrics: RepositoryMetrics

  """Namespace of the repository."""
  namespace: String

  """Repository is intended for non-production use only."""
  non_production_only: Boolean
  object_type: String

  """
  Indicates if images in this repository are allowed to run super-privileged.
  """
  privileged_images_allowed: Boolean

  """ID of the project in PRM. Only for ISV repositories."""
  prm_project_id: String

  """Reference to the product for this repository by id."""
  product_id: String @deprecated(reason: "The product data has been replaced by product listings for ISVs. For RH products it will be replaced June 2020.")

  """List of unique identifiers for the product listings."""
  product_listings: [ObjectID]

  """Map repositories to specific product versions."""
  product_versions: [String]
  protected_for_pull: Boolean

  """
  Indicates whether the repository requires subscription or other access restrictions for search.
  """
  protected_for_search: Boolean

  """
  Indicates that the repository does not have any images in it or has been deleted.
  """
  published: Boolean

  """Hostname of the registry where the repository can be accessed."""
  registry: String

  """
  Consumed by the Registry Proxy so that it can route users to the proper backend registry (e.g. Pulp or Quay).
  """
  registry_target: String

  """The release categories of a repository."""
  release_categories: [String]

  """Defines repository to point to in case this one is deprecated."""
  replaced_by_repository_name: String

  """Combination of image repository and namespace."""
  repository: String

  """
  Flag indicating whether (false) the repository is published on the legacy registry (registry.access.redhat.com), or (true) can only be published to registry.redhat.io.
  """
  requires_terms: Boolean

  """Describes what the image can be run on."""
  runs_on: RepositoryRunsOn

  """
  Flag indicating whether images associated with this repo are included in workflows where non-binary container images are published alongside their binary counterparts.
  """
  source_container_image_enabled: Boolean

  """The support levels of a repository."""
  support_levels: [String]

  """Flag indicating whether the repository is in tech preview or not."""
  tech_preview: Boolean @deprecated(reason: "Deprecated")

  """Total size of all images in bytes."""
  total_size_bytes: Int64

  """Total size of all uncompressed images in bytes."""
  total_uncompressed_size_bytes: Int64

  """
  When populated this field will override the content on the 'get this image' tab in red hat container catalog.
  """
  ui_get_this_image_override: String

  """Label of the vendor that owns this repository."""
  vendor_label: String

  """Marketplace related information."""
  marketplace: ContainerRepositoryMarketplace

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime
  edges: ContainerRepositoryEdges
}

"""
Content stream grades associated with an image tag and ids of images that participated in the evaluation of the current image's security grade.
"""
type RepositoryContentStreamGrades {
  """Name of floating tag associated with the image."""
  tag: String

  """Current image security grade."""
  grade: String

  """
  List of images that participated in the evaluation of the current image's security grade.
  """
  image_ids: [GradesImageIds]
}

"""
Images that participated in the evaluation of the current image's security grade.
"""
type GradesImageIds {
  """Id of the image."""
  id: String

  """Architecture of the image."""
  arch: String
  edges: GradesImageIdsEdges
}

type GradesImageIdsEdges {
  """
  Get a list of image vulnerabilities associated with an image. Exclude total for improved performance.
  """
  vulnerabilities(filter: ContainerImageVulnerabilityFilter, sort_by: [SortBy]): ContainerImageVulnerabilityPaginatedResponse
}

type ContainerImageVulnerabilityPaginatedResponse {
  data: [ContainerImageVulnerability]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

"""Vulnerability present in the content that is installed in the image."""
type ContainerImageVulnerability {
  """Advisory identifier."""
  advisory_id: String

  """Advisory type (RHSA, RHBA, ...)."""
  advisory_type: String

  """ID of the CVE."""
  cve_id: String

  """"""
  object_type: String

  """Array of package information applicable to this CVE."""
  packages: [ContainerImageVulnerabilityPackage]

  """Date the CVE was made public."""
  public_date: String

  """CVE severity."""
  severity: String

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime
}

"""Package information applicable to this CVE."""
type ContainerImageVulnerabilityPackage {
  """The next image that fixes this vulnerability."""
  fixed_by_image: ContainerImageVulnerabilityFixedByImage

  """The source RPM that contains the fix."""
  srpm_nevra: String

  """
  RPMs, identified by their RPM NVRA, that are present in the image and vulnerable.
  """
  rpm_nvra: [String]
}

"""The image that fixes the vulnerability."""
type ContainerImageVulnerabilityFixedByImage {
  """The _id of the image that fixes the vulnerability."""
  id: String

  """
  The data is denormalized to not require lookup in UI.
  
  RISK: could get out of sync with real refrenced data.
  """
  repositories: [ContainerImageVulnerabilityFixedByRepository]
  edges: ContainerImageVulnerabilityFixedByImageEdges
}

""""""
type ContainerImageVulnerabilityFixedByRepository {
  """"""
  registry: String

  """"""
  repository: String

  """"""
  tags: [ContainerImageVulnerabilityTag]
}

""""""
type ContainerImageVulnerabilityTag {
  """"""
  name: String
}

type ContainerImageVulnerabilityFixedByImageEdges {
  image: ContainerImageResponse
}

input ContainerImageVulnerabilityFilter {
  eq: NULL
  ne: NULL
  advisory_id: StringFilter
  advisory_type: StringFilter
  cve_id: StringFilter
  object_type: StringFilter
  packages_size: IntFilter
  packages_elemMatch: ContainerImageVulnerabilityPackageElemMatchFilter
  packages: ContainerImageVulnerabilityPackageListFilter
  public_date: StringFilter
  severity: StringFilter
  _id: ObjectIDFilter
  creation_date: DateTimeFilter
  last_update_date: DateTimeFilter
  and: [ContainerImageVulnerabilityFilter]
  or: [ContainerImageVulnerabilityFilter]
  nor: [ContainerImageVulnerabilityFilter]
  not: ContainerImageVulnerabilityFilter
}

input ContainerImageVulnerabilityPackageElemMatchFilter {
  and: [ContainerImageVulnerabilityPackageFilter]
  or: [ContainerImageVulnerabilityPackageFilter]
  nor: [ContainerImageVulnerabilityPackageFilter]
  not: ContainerImageVulnerabilityPackageFilter
}

input ContainerImageVulnerabilityPackageFilter {
  eq: NULL
  ne: NULL
  fixed_by_image: ContainerImageVulnerabilityFixedByImageFilter
  srpm_nevra: StringFilter
  rpm_nvra_size: IntFilter
  rpm_nvra: StringListFilter
  and: [ContainerImageVulnerabilityPackageFilter]
  or: [ContainerImageVulnerabilityPackageFilter]
  nor: [ContainerImageVulnerabilityPackageFilter]
  not: ContainerImageVulnerabilityPackageFilter
}

input ContainerImageVulnerabilityFixedByImageFilter {
  eq: NULL
  ne: NULL
  id: StringFilter
  repositories_size: IntFilter
  repositories_elemMatch: ContainerImageVulnerabilityFixedByRepositoryElemMatchFilter
  repositories: ContainerImageVulnerabilityFixedByRepositoryListFilter
  and: [ContainerImageVulnerabilityFixedByImageFilter]
  or: [ContainerImageVulnerabilityFixedByImageFilter]
  nor: [ContainerImageVulnerabilityFixedByImageFilter]
  not: ContainerImageVulnerabilityFixedByImageFilter
}

input ContainerImageVulnerabilityFixedByRepositoryElemMatchFilter {
  and: [ContainerImageVulnerabilityFixedByRepositoryFilter]
  or: [ContainerImageVulnerabilityFixedByRepositoryFilter]
  nor: [ContainerImageVulnerabilityFixedByRepositoryFilter]
  not: ContainerImageVulnerabilityFixedByRepositoryFilter
}

input ContainerImageVulnerabilityFixedByRepositoryFilter {
  eq: NULL
  ne: NULL
  registry: StringFilter
  repository: StringFilter
  tags_size: IntFilter
  tags_elemMatch: ContainerImageVulnerabilityTagElemMatchFilter
  tags: ContainerImageVulnerabilityTagListFilter
  and: [ContainerImageVulnerabilityFixedByRepositoryFilter]
  or: [ContainerImageVulnerabilityFixedByRepositoryFilter]
  nor: [ContainerImageVulnerabilityFixedByRepositoryFilter]
  not: ContainerImageVulnerabilityFixedByRepositoryFilter
}

input ContainerImageVulnerabilityTagElemMatchFilter {
  and: [ContainerImageVulnerabilityTagFilter]
  or: [ContainerImageVulnerabilityTagFilter]
  nor: [ContainerImageVulnerabilityTagFilter]
  not: ContainerImageVulnerabilityTagFilter
}

input ContainerImageVulnerabilityTagFilter {
  eq: NULL
  ne: NULL
  name: StringFilter
  and: [ContainerImageVulnerabilityTagFilter]
  or: [ContainerImageVulnerabilityTagFilter]
  nor: [ContainerImageVulnerabilityTagFilter]
  not: ContainerImageVulnerabilityTagFilter
}

input ContainerImageVulnerabilityTagListFilter {
  list_index_filter: ContainerImageVulnerabilityTagListIndexFilter
  eq: NULL
  ne: NULL
  name: StringFilter
  and: [ContainerImageVulnerabilityTagFilter]
  or: [ContainerImageVulnerabilityTagFilter]
  nor: [ContainerImageVulnerabilityTagFilter]
  not: ContainerImageVulnerabilityTagFilter
}

input ContainerImageVulnerabilityTagListIndexFilter {
  condition: ContainerImageVulnerabilityTagFilter
  index: Int
}

input ContainerImageVulnerabilityFixedByRepositoryListFilter {
  list_index_filter: ContainerImageVulnerabilityFixedByRepositoryListIndexFilter
  eq: NULL
  ne: NULL
  registry: StringFilter
  repository: StringFilter
  tags_size: IntFilter
  tags_elemMatch: ContainerImageVulnerabilityTagElemMatchFilter
  tags: ContainerImageVulnerabilityTagListFilter
  and: [ContainerImageVulnerabilityFixedByRepositoryFilter]
  or: [ContainerImageVulnerabilityFixedByRepositoryFilter]
  nor: [ContainerImageVulnerabilityFixedByRepositoryFilter]
  not: ContainerImageVulnerabilityFixedByRepositoryFilter
}

input ContainerImageVulnerabilityFixedByRepositoryListIndexFilter {
  condition: ContainerImageVulnerabilityFixedByRepositoryFilter
  index: Int
}

input ContainerImageVulnerabilityPackageListFilter {
  list_index_filter: ContainerImageVulnerabilityPackageListIndexFilter
  eq: NULL
  ne: NULL
  fixed_by_image: ContainerImageVulnerabilityFixedByImageFilter
  srpm_nevra: StringFilter
  rpm_nvra_size: IntFilter
  rpm_nvra: StringListFilter
  and: [ContainerImageVulnerabilityPackageFilter]
  or: [ContainerImageVulnerabilityPackageFilter]
  nor: [ContainerImageVulnerabilityPackageFilter]
  not: ContainerImageVulnerabilityPackageFilter
}

input ContainerImageVulnerabilityPackageListIndexFilter {
  condition: ContainerImageVulnerabilityPackageFilter
  index: Int
}

"""Display data for Catalog."""
type RepositoryDisplayData {
  """The long description of the repository."""
  long_description: String

  """Markdown for the long description of the repository."""
  long_description_markdown: String

  """The repository name."""
  name: String

  """The io_openshift_tags."""
  openshift_tags: String

  """The short description of the repository."""
  short_description: String
}

"""Information about documentation link."""
type RepositoryDocumentationLink {
  """Title of the link."""
  title: String

  """The type of collateral."""
  type: String

  """The URL for the documentation."""
  url: URI
}

"""Label override data."""
type RepositoryLabelOverride {
  """Override for 'description' label."""
  description: String

  """Override for 'io.k8s.display-name' label."""
  io_k8s_displayName: String

  """Override for 'io.openshift.tags' label."""
  io_openshift_tags: String

  """Override for 'summary' label."""
  summary: String
}

"""Metrics information."""
type RepositoryMetrics {
  """
  The date and time when these metrics were last updated for the repository.
  """
  last_update_date: DateTime

  """The number of pulls in the last 30 days for the repository."""
  pulls_in_last_30_days: Int
}

"""Describes what the image can be run on."""
type RepositoryRunsOn {
  """Can the image run on openshift_online."""
  openshift_online: Boolean
}

"""Marketplace related information."""
type ContainerRepositoryMarketplace {
  listing_url: URI
}

type ContainerRepositoryEdges {
  certification_project(page_size: Int = 50, page: Int = 0, filter: CertificationProjectFilter, sort_by: [SortBy]): CertificationProjectPaginatedResponse
  images(page_size: Int = 50, page: Int = 0, filter: ContainerImageFilter, sort_by: [SortBy]): ContainerImagePaginatedResponse
  product_listings(page_size: Int = 50, page: Int = 0, filter: ProductListingFilter, sort_by: [SortBy]): ProductListingPaginatedResponse
  operator_bundles(page_size: Int = 50, page: Int = 0, filter: OperatorBundleFilter, sort_by: [SortBy]): OperatorBundlePaginatedResponse
  replaced_by_repository: ContainerRepositoryResponse
  vendor: ContainerVendorResponse
}

type CertificationProjectPaginatedResponse {
  data: [CertificationProject]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

"""Certification project information."""
type CertificationProject {
  """
  Value is derived from last_update_date field during when the certification project is published. Before it or if project is again unpublished, the value is null.
  """
  certification_date: DateTime

  """
  The certification project can be certified on several levels. This field determines whether the content was certified by ISV partner who followed official Red Hat certification, or by vendor validation.
  """
  certification_level: String

  """Certification Status."""
  certification_status: String

  """Certification User."""
  certification_user: Int

  """Contacts for certification project."""
  contacts: [CertProjectContacts]
  container: CertProjectContainer

  """Configuration specific to Helm Chart projects."""
  helm_chart: CertProjectHelmChart
  drupal: CertProjectDrupal @deprecated(reason: "Deprecated.")
  marketplace: CertProjectMarketplace

  """The owner provided name of the certification project."""
  name: String
  non_container: CertProjectNonContainer

  """Operator Distribution."""
  operator_distribution: String

  """Configuration specific to OpenStack projects."""
  openstack: CertProjectOpenStack

  """
  Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  """
  org_id: Int

  """Unique identifier for the product listing."""
  product_listings: [ObjectID]

  """Status of the certification project."""
  project_status: String

  """Who published the certification project."""
  published_by: String
  redhat: CertProjectRedhat
  self_certification: CertProjectSelfCertification

  """Special certifications specific to the certification platform"""
  badges: [String]

  """Certification project type."""
  type: String

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime

  """SSO username from the JWT - who created the entry or null if no JWT."""
  created_on_behalf_of: String

  """SSO username from the JWT - who updated the entry or null if no JWT."""
  updated_on_behalf_of: String
  edges: CertificationProjectEdges
}

"""Contact info."""
type CertProjectContacts {
  email_address: Email
  type: String
}

scalar Email

"""Container related information."""
type CertProjectContainer {
  """The application categories (types)."""
  application_categories: [String]

  """
  Once a container is certified it is automatically published. Auto-publish must be enabled in order to set up automatic rebuilds. Auto-publish must always be enabled when auto-rebuilding is enabled.
  """
  auto_publish: Boolean

  """Auto rebuild enabled."""
  auto_rebuild: Boolean @deprecated(reason: "The field was deprecated since ISV certification no longer provides a build service.")

  """
  This value of this field is related to certProject.type field. See ISV-2012.
  """
  build_categories: String

  """Distribution approval obtained."""
  distribution_approval: Boolean

  """Distribution method."""
  distribution_method: String

  """ID of the project in for ISV repositories."""
  isv_pid: String

  """
  Kubernetes objects for operator registry projects. Value has to be a valid YAML.
  """
  kube_objects: OpenPGPEncrypted

  """
  Docker config for operator registry projects. Value has to be a valid JSON.
  """
  docker_config_json: OpenPGPEncrypted

  """OS Content Type."""
  os_content_type: String

  """Passed RH Cert."""
  passed_rhcert: Boolean

  """A container needs to run in a privileged state."""
  privileged: Boolean
  published: Boolean @deprecated(reason: "The field was replaced by certification_status.")

  """Flag that indicates that project is using Red Hat hosted registry."""
  hosted_registry: Boolean

  """
  Hostname of the registry where the repository can be accessed.
  Examples: registry.company.com assumes the default port, 443. registry.company.com:5000 repository path with optional port specified.
  It is only applicable for projects with an 'external' distribution method.
  """
  registry: String
  registry_credentials: RegistryCredentials

  """
  Note: These instructions will be displayed in the Red Hat Container Catalog as is. Please modify the following template as it suits your needs.
  """
  registry_override_instruct: String

  """Release category."""
  release_category: String

  """
  Path to the container repository as found in the registry.
  
  Examples:
  path/to/repository
  repository
  
  This field can only be edited when there are no published containers.
  It is only applicable for projects with an 'external' distribution method.
  """
  repository: String

  """
  The repository description is displayed on the container
  catalog repository overview page.
  """
  repository_description: String

  """
  This should represent your product (or the component if your product consists of multiple containers)
  and a major version. For example, you could use names like jboss-server7, or agent5.
  
  This value is only editable when there are no published containers in this project.
  It is only applicable for projects that do not have the 'external' distribution method.
  """
  repository_name: String

  """Service Account Secret."""
  service_account_secret: String @deprecated(reason: "Deprecated")

  """Short description of the container."""
  short_description: String

  """Supported Platforms."""
  support_platforms: [String]

  """
  Container type.
  Field is required, if project type is 'Container', and the field is immutable for Partners after creation.
  """
  type: String

  """
  Filename other than the default Dockerfile or a path to a Dockerfile in a subdirectory.
  """
  source_dockerfile: String @deprecated(reason: "The field was deprecated since ISV certification no longer provides a build service.")

  """
  Force the build to ignore cached layers and rerun all steps of the Dockerfile.
  """
  build_no_cache: Boolean @deprecated(reason: "The field was deprecated since ISV certification no longer provides a build service.")

  """
  Override default location (root directory) for applications within a subdirectory.
  """
  source_context_dir: String @deprecated(reason: "The field was deprecated since ISV certification no longer provides a build service.")

  """Whether Red Hat will build your container."""
  build_service: Boolean @deprecated(reason: "The field was deprecated since ISV certification no longer provides a build service.")

  """The specific Git branch to checkout."""
  source_ref: String @deprecated(reason: "The field was deprecated since ISV certification no longer provides a build service.")

  """
  The URL to the source used for the build.
  For example: 'https://github.com/openshift/ruby-hello-world
  """
  source_uri: URI @deprecated(reason: "The field was deprecated since ISV certification no longer provides a build service.")

  """GitHub users authorized to submit a certification pull request."""
  github_usernames: [String]
  edges: CertProjectContainerEdges
}

scalar OpenPGPEncrypted

"""Registry credentials."""
type RegistryCredentials {
  """Container registry username."""
  username: OpenPGPEncrypted

  """Container registry password."""
  password: OpenPGPEncrypted
}

type CertProjectContainerEdges {
  repository: ContainerRepositoryResponse
}

"""Helm chart related information."""
type CertProjectHelmChart {
  """How your Helm Chart is distributed."""
  distribution_method: String

  """The Helm Chart name as it will appear in GitHub."""
  chart_name: String

  """
  URL to the externally distributed Helm Chart repository. This is not used if the chart is distributed via Red Hat.
  """
  repository: URI

  """Instructions for users to access an externally distributed Helm Chart."""
  distribution_instructions: String

  """Base64 encoded PGP public key. Used to sign result submissions."""
  public_pgp_key: Base64EncodedString

  """URL to the user submitted github pull request for this project."""
  github_pull_request: URI

  """Short description of the Helm Chart."""
  short_description: String

  """Long description of the Helm Chart."""
  long_description: String

  """The application categories (types)."""
  application_categories: [String]

  """OCP versions for this Helm Chart."""
  ocp_versions: [String]

  """GitHub users authorized to submit a certification pull request."""
  github_usernames: [String]
}

scalar Base64EncodedString

"""Drupal related information."""
type CertProjectDrupal {
  """Company node ID from Red Hat Connect."""
  company_id: Int

  """Relation ID for certification project."""
  relation: Int

  """Zone for certification project."""
  zone: String
}

"""Marketplace related information."""
type CertProjectMarketplace {
  enablement_status: String
  enablement_url: URI
  listing_url: URI
  published: Boolean
}

"""Non-container project info."""
type CertProjectNonContainer {
  source_system_id: String
}

"""OpenStack related information."""
type CertProjectOpenStack {
  """OpenStack service type for test suite selection"""
  service: String
}

"""Red Hat projects related information."""
type CertProjectRedhat {
  """Red Hat Product ID."""
  product_id: Int

  """Red Hat product name."""
  product_name: String

  """Red Hat Product Version."""
  product_version: String

  """Red Hat Product Version."""
  product_version_id: Int
}

"""Red Hat projects related information."""
type CertProjectSelfCertification {
  """Application Profiler."""
  app_profiler: Boolean

  """Application Runs on App Type."""
  app_runs_on_app_type: Boolean

  """Whether the Self Certification Evidence URL requires a customer login."""
  auth_login: Boolean

  """Self Certification Evidence URL."""
  certification_url: URI

  """Can Commercially Support on App Type."""
  comm_support_on_app_type: Boolean

  """Self Certification Requested."""
  requested: Boolean

  """TsaNET Member."""
  tsanet_member: Boolean
}

type CertificationProjectEdges {
  vendor: ContainerVendorResponse

  """Get product listings for certification project using its ID."""
  product_listings(filter: ProductListingFilter, sort_by: [SortBy]): ProductListingPaginatedResponse
}

type ContainerVendorResponse {
  data: ContainerVendor
  error: ResponseError
}

"""Stores information about a Vendor"""
type ContainerVendor {
  allow_hosted_container_registry: Boolean

  """URL to the vendor's main website."""
  company_url: URI

  """
  General contact information for the vendor, to be displayed on the vendor page on RHCC.
  """
  contact: ContainerVendorContact
  description: String

  """Company node ID from Red Hat Connect."""
  drupal_company_id: Int

  """The industry / vertical the vendor belongs to."""
  industries: [String]
  label: String

  """A flag that determines if vendor label can be changed."""
  label_locked: Boolean
  logo_url: URI
  name: String
  object_type: String

  """Indicate that the vendor has been published."""
  published: Boolean
  registry_urls: [String]

  """RSS feed for vendor."""
  rss_feed_url: URI

  """Token for outbound namespace for pulling published marketplace images."""
  service_account_token: String
  social_media_links: [ContainerVendorSocialMediaLinks]

  """
  Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  """
  org_id: Int

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime
  edges: ContainerVendorEdges
}

"""Contact information"""
type ContainerVendorContact {
  """General contact email address."""
  email: String

  """General contact phone number."""
  phone: String
}

"""Social media links."""
type ContainerVendorSocialMediaLinks {
  """The name of the social media provider."""
  name: String

  """The URL to the social media site for the vendor."""
  url: URI
}

type ContainerVendorEdges {
  product_listings_org_id(page_size: Int = 50, page: Int = 0, filter: ProductListingFilter, sort_by: [SortBy]): ProductListingPaginatedResponse
  product_listings_label(page_size: Int = 50, page: Int = 0, filter: ProductListingFilter, sort_by: [SortBy]): ProductListingPaginatedResponse
  repositories(page_size: Int = 50, page: Int = 0, filter: ContainerRepositoryFilter, sort_by: [SortBy]): ContainerRepositoryPaginatedResponse
}

type ProductListingPaginatedResponse {
  data: [ProductListing]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

"""
Product listings define a marketing page in the Ecosystem Catalog. It allows you to group repos and showcase what they accomplish together as an application. In the case of operators, your CSV file populates OperatorHub, which can only be viewed in cluster through OpenShift. Your product listing is publicly visible in the Ecosystem Catalog so anyone can know that it is offered.
"""
type ProductListing {
  badges: [BadgesItems] @deprecated(reason: "Deprecated")
  category: String

  """List of unique identifiers for the certification project."""
  cert_projects: [ObjectID]

  """
  List of contacts for the product listing. This field is required when the product listing is published.
  """
  contacts: [ContactsItems]

  """This field is required when the product listing is published."""
  descriptions: Descriptions

  """Company node ID from Red Hat Connect. Read only."""
  drupal_company_id: Int

  """FAQ section for the catalog page."""
  faqs: [FAQSItems]

  """Features section for the catalog page."""
  features: [FeaturesItems]

  """Indicates if the listing is eligible to be featured in Catalog."""
  focus_product: Boolean

  """This field is required when the product listing is published."""
  functional_categories: [String]

  """Information related to helm chart product listing."""
  helm_chart: ProductListingHelmChart
  legal: Legal

  """This field is required when the product listing is published."""
  linked_resources: [LinkedResourcesItems]
  logo: Logo
  marketplace: Marketplace @deprecated(reason: "This field has been moved to certProject.")

  """This field is required when the product listing is published."""
  name: String

  """This field is required when the product listing is published."""
  published: Boolean

  """
  Flag determining if product listing is considered to be deleted. Product listing can be deleted only if it is not published. Value is set to False by default.
  """
  deleted: Boolean
  quick_start_configuration: QuickStartConfiguration

  """List of unique identifiers for the repository."""
  repositories: [ObjectID]

  """List of search aliases for Solr."""
  search_aliases: [SearchAliasesItems]

  """This field is required when the product listing is published."""
  support: Support

  """List of target platforms for the product listing."""
  target_platforms: [String]

  """This field is required when the product listing is published."""
  type: String
  vendor_label: String
  operator_bundles: [OperatorBundlesItems]

  """
  Special certifications specific to the certification platform. The value is given by attached certification projects which are published.
  """
  certification_badges: [String]

  """
  Special certifications specific to the certification platform. The value is given by all attached certification projects with any certification_level.
  """
  certification_badges_all: [String]

  """
  The product listing content can be certified on several levels. This field determines whether the content was certified by Red Hat itself, by an ISV partner who followed official Red Hat certification, or by vendor validation.
  """
  certification_level: String

  """List of industries to which the product listing belongs."""
  industries: [String]

  """
  Determine a way how a product is deployed, based only on published projects.
  """
  deployed_as: [String]

  """
  Determine a way how a product is deployed, based on all projects with any certification_status.
  """
  deployed_as_all: [String]

  """
  Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  """
  org_id: Int

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime
  edges: ProductListingEdges
}

""""""
type BadgesItems {
  badge: String
  project_id: ObjectID
}

""""""
type ContactsItems {
  email_address: Email
  type: String
}

"""This field is required when the product listing is published."""
type Descriptions {
  long: String
  short: String
}

"""This field is required when the product listing is published."""
type FAQSItems {
  answer: String
  question: String
}

"""This field is required when the product listing is published."""
type FeaturesItems {
  description: String
  title: String
}

""""""
type ProductListingHelmChart {
  """OCP versions for this helm chart."""
  ocp_versions: [String]
}

""""""
type Legal {
  description: String
  license_agreement_url: URI
  privacy_policy_url: URI
}

""""""
type LinkedResourcesItems {
  category: String
  description: String
  thumbnail_url: URI
  title: String
  type: String
  url: URI
}

""""""
type Logo {
  url: URI
}

""""""
type Marketplace {
  enablement_status: String
  enablement_url: URI
  listing_url: URI
  published: Boolean
}

""""""
type QuickStartConfiguration {
  instructions: String

  """
  A flag indicating whether a product uses a default instruction for deployment.
  """
  default_deploy_instructions: Boolean
}

""""""
type SearchAliasesItems {
  key: String
  value: String
}

"""This field is required when the product listing is published."""
type Support {
  description: String
  email_address: Email
  phone_number: String
  url: URI
}

""""""
type OperatorBundlesItems {
  """Bundle unique identifier"""
  _id: ObjectID

  """Bundle package name"""
  package: String
  capabilities: [String]

  """Specific OCP version for this bundle, e.g. \"4.5\"."""
  ocp_version: SemVer

  """
  A subset of the \"metadata.annotations\" object from the CSV. Any annotations that are in the \"operators.openshift.io\" namespace that are strings of JSON will be expanded if it is valid JSON. Namespaces are not preserved due to their usage of special characters and all dashes are converted to underscores for consistency with other fields.
  """
  annotations: OperatorBundleAnnotation
}

scalar SemVer

"""
A subset of the \"metadata.annotations\" object from the CSV. Any annotations that are in the \"operators.openshift.io\" namespace that are strings of JSON will be expanded if it is valid JSON. Namespaces are not preserved due to their usage of special characters and all dashes are converted to underscores for consistency with other fields.
"""
type OperatorBundleAnnotation {
  """
  The deserialized value of operators.openshift.io/infrastructure-features. This defaults to an empty array.
  """
  infrastructure_features: [String]

  """
  The deserialized value of operators.openshift.io/valid-subscription. This defaults to an empty array.
  """
  valid_subscription: [String]
}

type ProductListingEdges {
  """Vendor associated with the product listing."""
  vendor: ContainerVendorResponse

  """Get certification projects associated with product listing."""
  cert_projects(filter: CertificationProjectFilter, sort_by: [SortBy]): CertificationProjectPaginatedResponse
}

input CertificationProjectFilter {
  eq: NULL
  ne: NULL
  certification_date: DateTimeFilter
  certification_level: StringFilter
  certification_status: StringFilter
  certification_user: IntFilter
  contacts_size: IntFilter
  contacts_elemMatch: CertProjectContactsElemMatchFilter
  contacts: CertProjectContactsListFilter
  container: CertProjectContainerFilter
  helm_chart: CertProjectHelmChartFilter
  drupal: CertProjectDrupalFilter
  marketplace: CertProjectMarketplaceFilter
  name: StringFilter
  non_container: CertProjectNonContainerFilter
  operator_distribution: StringFilter
  openstack: CertProjectOpenStackFilter
  org_id: IntFilter
  product_listings_size: IntFilter
  product_listings: ObjectIDListFilter
  project_status: StringFilter
  published_by: StringFilter
  redhat: CertProjectRedhatFilter
  self_certification: CertProjectSelfCertificationFilter
  badges_size: IntFilter
  badges: StringListFilter
  type: StringFilter
  _id: ObjectIDFilter
  creation_date: DateTimeFilter
  last_update_date: DateTimeFilter
  created_on_behalf_of: StringFilter
  updated_on_behalf_of: StringFilter
  and: [CertificationProjectFilter]
  or: [CertificationProjectFilter]
  nor: [CertificationProjectFilter]
  not: CertificationProjectFilter
}

input CertProjectContactsElemMatchFilter {
  and: [CertProjectContactsFilter]
  or: [CertProjectContactsFilter]
  nor: [CertProjectContactsFilter]
  not: CertProjectContactsFilter
}

input CertProjectContactsFilter {
  eq: NULL
  ne: NULL
  email_address: EmailFilter
  type: StringFilter
  and: [CertProjectContactsFilter]
  or: [CertProjectContactsFilter]
  nor: [CertProjectContactsFilter]
  not: CertProjectContactsFilter
}

input EmailFilter {
  eq: Email
  ne: Email
  le: Email
  lt: Email
  ge: Email
  gt: Email
  in: [Email]
  out: [Email]
  iregex: String
  regex: String
}

input CertProjectContactsListFilter {
  list_index_filter: CertProjectContactsListIndexFilter
  eq: NULL
  ne: NULL
  email_address: EmailFilter
  type: StringFilter
  and: [CertProjectContactsFilter]
  or: [CertProjectContactsFilter]
  nor: [CertProjectContactsFilter]
  not: CertProjectContactsFilter
}

input CertProjectContactsListIndexFilter {
  condition: CertProjectContactsFilter
  index: Int
}

input CertProjectContainerFilter {
  eq: NULL
  ne: NULL
  application_categories_size: IntFilter
  application_categories: StringListFilter
  auto_publish: BooleanFilter
  auto_rebuild: BooleanFilter
  build_categories: StringFilter
  distribution_approval: BooleanFilter
  distribution_method: StringFilter
  isv_pid: StringFilter
  kube_objects: StringFilter
  docker_config_json: StringFilter
  os_content_type: StringFilter
  passed_rhcert: BooleanFilter
  privileged: BooleanFilter
  published: BooleanFilter
  hosted_registry: BooleanFilter
  registry: StringFilter
  registry_credentials: RegistryCredentialsFilter
  registry_override_instruct: StringFilter
  release_category: StringFilter
  repository: StringFilter
  repository_description: StringFilter
  repository_name: StringFilter
  service_account_secret: StringFilter
  short_description: StringFilter
  support_platforms_size: IntFilter
  support_platforms: StringListFilter
  type: StringFilter
  source_dockerfile: StringFilter
  build_no_cache: BooleanFilter
  source_context_dir: StringFilter
  build_service: BooleanFilter
  source_ref: StringFilter
  source_uri: URIFilter
  github_usernames_size: IntFilter
  github_usernames: StringListFilter
  and: [CertProjectContainerFilter]
  or: [CertProjectContainerFilter]
  nor: [CertProjectContainerFilter]
  not: CertProjectContainerFilter
}

input RegistryCredentialsFilter {
  eq: NULL
  ne: NULL
  username: StringFilter
  password: StringFilter
  and: [RegistryCredentialsFilter]
  or: [RegistryCredentialsFilter]
  nor: [RegistryCredentialsFilter]
  not: RegistryCredentialsFilter
}

input URIFilter {
  eq: URI
  ne: URI
  le: URI
  lt: URI
  ge: URI
  gt: URI
  in: [URI]
  out: [URI]
  iregex: String
  regex: String
}

input CertProjectHelmChartFilter {
  eq: NULL
  ne: NULL
  distribution_method: StringFilter
  chart_name: StringFilter
  repository: URIFilter
  distribution_instructions: StringFilter
  public_pgp_key: StringFilter
  github_pull_request: URIFilter
  short_description: StringFilter
  long_description: StringFilter
  application_categories_size: IntFilter
  application_categories: StringListFilter
  ocp_versions_size: IntFilter
  ocp_versions: StringListFilter
  github_usernames_size: IntFilter
  github_usernames: StringListFilter
  and: [CertProjectHelmChartFilter]
  or: [CertProjectHelmChartFilter]
  nor: [CertProjectHelmChartFilter]
  not: CertProjectHelmChartFilter
}

input CertProjectDrupalFilter {
  eq: NULL
  ne: NULL
  company_id: IntFilter
  relation: IntFilter
  zone: StringFilter
  and: [CertProjectDrupalFilter]
  or: [CertProjectDrupalFilter]
  nor: [CertProjectDrupalFilter]
  not: CertProjectDrupalFilter
}

input CertProjectMarketplaceFilter {
  eq: NULL
  ne: NULL
  enablement_status: StringFilter
  enablement_url: URIFilter
  listing_url: URIFilter
  published: BooleanFilter
  and: [CertProjectMarketplaceFilter]
  or: [CertProjectMarketplaceFilter]
  nor: [CertProjectMarketplaceFilter]
  not: CertProjectMarketplaceFilter
}

input CertProjectNonContainerFilter {
  eq: NULL
  ne: NULL
  source_system_id: StringFilter
  and: [CertProjectNonContainerFilter]
  or: [CertProjectNonContainerFilter]
  nor: [CertProjectNonContainerFilter]
  not: CertProjectNonContainerFilter
}

input CertProjectOpenStackFilter {
  eq: NULL
  ne: NULL
  service: StringFilter
  and: [CertProjectOpenStackFilter]
  or: [CertProjectOpenStackFilter]
  nor: [CertProjectOpenStackFilter]
  not: CertProjectOpenStackFilter
}

input ObjectIDListFilter {
  list_index_filter: ObjectIDListIndexFilter
  eq: ObjectIDFilterScalar
  ne: ObjectIDFilterScalar
  le: ObjectIDFilterScalar
  lt: ObjectIDFilterScalar
  ge: ObjectIDFilterScalar
  gt: ObjectIDFilterScalar
  in: [ObjectIDFilterScalar]
  out: [ObjectIDFilterScalar]
}

input ObjectIDListIndexFilter {
  condition: ObjectIDFilter
  index: Int
}

input CertProjectRedhatFilter {
  eq: NULL
  ne: NULL
  product_id: IntFilter
  product_name: StringFilter
  product_version: StringFilter
  product_version_id: IntFilter
  and: [CertProjectRedhatFilter]
  or: [CertProjectRedhatFilter]
  nor: [CertProjectRedhatFilter]
  not: CertProjectRedhatFilter
}

input CertProjectSelfCertificationFilter {
  eq: NULL
  ne: NULL
  app_profiler: BooleanFilter
  app_runs_on_app_type: BooleanFilter
  auth_login: BooleanFilter
  certification_url: URIFilter
  comm_support_on_app_type: BooleanFilter
  requested: BooleanFilter
  tsanet_member: BooleanFilter
  and: [CertProjectSelfCertificationFilter]
  or: [CertProjectSelfCertificationFilter]
  nor: [CertProjectSelfCertificationFilter]
  not: CertProjectSelfCertificationFilter
}

input ProductListingFilter {
  eq: NULL
  ne: NULL
  badges_size: IntFilter
  badges_elemMatch: BadgesItemsElemMatchFilter
  badges: BadgesItemsListFilter
  category: StringFilter
  cert_projects_size: IntFilter
  cert_projects: ObjectIDListFilter
  contacts_size: IntFilter
  contacts_elemMatch: ContactsItemsElemMatchFilter
  contacts: ContactsItemsListFilter
  descriptions: DescriptionsFilter
  drupal_company_id: IntFilter
  faqs_size: IntFilter
  faqs_elemMatch: FAQSItemsElemMatchFilter
  faqs: FAQSItemsListFilter
  features_size: IntFilter
  features_elemMatch: FeaturesItemsElemMatchFilter
  features: FeaturesItemsListFilter
  focus_product: BooleanFilter
  functional_categories_size: IntFilter
  functional_categories: StringListFilter
  helm_chart: ProductListingHelmChartFilter
  legal: LegalFilter
  linked_resources_size: IntFilter
  linked_resources_elemMatch: LinkedResourcesItemsElemMatchFilter
  linked_resources: LinkedResourcesItemsListFilter
  logo: LogoFilter
  marketplace: MarketplaceFilter
  name: StringFilter
  published: BooleanFilter
  deleted: BooleanFilter
  quick_start_configuration: QuickStartConfigurationFilter
  repositories_size: IntFilter
  repositories: ObjectIDListFilter
  search_aliases_size: IntFilter
  search_aliases_elemMatch: SearchAliasesItemsElemMatchFilter
  search_aliases: SearchAliasesItemsListFilter
  support: SupportFilter
  target_platforms_size: IntFilter
  target_platforms: StringListFilter
  type: StringFilter
  vendor_label: StringFilter
  operator_bundles_size: IntFilter
  operator_bundles_elemMatch: OperatorBundlesItemsElemMatchFilter
  operator_bundles: OperatorBundlesItemsListFilter
  certification_badges_size: IntFilter
  certification_badges: StringListFilter
  certification_badges_all_size: IntFilter
  certification_badges_all: StringListFilter
  certification_level: StringFilter
  industries_size: IntFilter
  industries: StringListFilter
  deployed_as_size: IntFilter
  deployed_as: StringListFilter
  deployed_as_all_size: IntFilter
  deployed_as_all: StringListFilter
  org_id: IntFilter
  _id: ObjectIDFilter
  creation_date: DateTimeFilter
  last_update_date: DateTimeFilter
  and: [ProductListingFilter]
  or: [ProductListingFilter]
  nor: [ProductListingFilter]
  not: ProductListingFilter
}

input BadgesItemsElemMatchFilter {
  and: [BadgesItemsFilter]
  or: [BadgesItemsFilter]
  nor: [BadgesItemsFilter]
  not: BadgesItemsFilter
}

input BadgesItemsFilter {
  eq: NULL
  ne: NULL
  badge: StringFilter
  project_id: ObjectIDFilter
  and: [BadgesItemsFilter]
  or: [BadgesItemsFilter]
  nor: [BadgesItemsFilter]
  not: BadgesItemsFilter
}

input BadgesItemsListFilter {
  list_index_filter: BadgesItemsListIndexFilter
  eq: NULL
  ne: NULL
  badge: StringFilter
  project_id: ObjectIDFilter
  and: [BadgesItemsFilter]
  or: [BadgesItemsFilter]
  nor: [BadgesItemsFilter]
  not: BadgesItemsFilter
}

input BadgesItemsListIndexFilter {
  condition: BadgesItemsFilter
  index: Int
}

input ContactsItemsElemMatchFilter {
  and: [ContactsItemsFilter]
  or: [ContactsItemsFilter]
  nor: [ContactsItemsFilter]
  not: ContactsItemsFilter
}

input ContactsItemsFilter {
  eq: NULL
  ne: NULL
  email_address: EmailFilter
  type: StringFilter
  and: [ContactsItemsFilter]
  or: [ContactsItemsFilter]
  nor: [ContactsItemsFilter]
  not: ContactsItemsFilter
}

input ContactsItemsListFilter {
  list_index_filter: ContactsItemsListIndexFilter
  eq: NULL
  ne: NULL
  email_address: EmailFilter
  type: StringFilter
  and: [ContactsItemsFilter]
  or: [ContactsItemsFilter]
  nor: [ContactsItemsFilter]
  not: ContactsItemsFilter
}

input ContactsItemsListIndexFilter {
  condition: ContactsItemsFilter
  index: Int
}

input DescriptionsFilter {
  eq: NULL
  ne: NULL
  long: StringFilter
  short: StringFilter
  and: [DescriptionsFilter]
  or: [DescriptionsFilter]
  nor: [DescriptionsFilter]
  not: DescriptionsFilter
}

input FAQSItemsElemMatchFilter {
  and: [FAQSItemsFilter]
  or: [FAQSItemsFilter]
  nor: [FAQSItemsFilter]
  not: FAQSItemsFilter
}

input FAQSItemsFilter {
  eq: NULL
  ne: NULL
  answer: StringFilter
  question: StringFilter
  and: [FAQSItemsFilter]
  or: [FAQSItemsFilter]
  nor: [FAQSItemsFilter]
  not: FAQSItemsFilter
}

input FAQSItemsListFilter {
  list_index_filter: FAQSItemsListIndexFilter
  eq: NULL
  ne: NULL
  answer: StringFilter
  question: StringFilter
  and: [FAQSItemsFilter]
  or: [FAQSItemsFilter]
  nor: [FAQSItemsFilter]
  not: FAQSItemsFilter
}

input FAQSItemsListIndexFilter {
  condition: FAQSItemsFilter
  index: Int
}

input FeaturesItemsElemMatchFilter {
  and: [FeaturesItemsFilter]
  or: [FeaturesItemsFilter]
  nor: [FeaturesItemsFilter]
  not: FeaturesItemsFilter
}

input FeaturesItemsFilter {
  eq: NULL
  ne: NULL
  description: StringFilter
  title: StringFilter
  and: [FeaturesItemsFilter]
  or: [FeaturesItemsFilter]
  nor: [FeaturesItemsFilter]
  not: FeaturesItemsFilter
}

input FeaturesItemsListFilter {
  list_index_filter: FeaturesItemsListIndexFilter
  eq: NULL
  ne: NULL
  description: StringFilter
  title: StringFilter
  and: [FeaturesItemsFilter]
  or: [FeaturesItemsFilter]
  nor: [FeaturesItemsFilter]
  not: FeaturesItemsFilter
}

input FeaturesItemsListIndexFilter {
  condition: FeaturesItemsFilter
  index: Int
}

input ProductListingHelmChartFilter {
  eq: NULL
  ne: NULL
  ocp_versions_size: IntFilter
  ocp_versions: StringListFilter
  and: [ProductListingHelmChartFilter]
  or: [ProductListingHelmChartFilter]
  nor: [ProductListingHelmChartFilter]
  not: ProductListingHelmChartFilter
}

input LegalFilter {
  eq: NULL
  ne: NULL
  description: StringFilter
  license_agreement_url: URIFilter
  privacy_policy_url: URIFilter
  and: [LegalFilter]
  or: [LegalFilter]
  nor: [LegalFilter]
  not: LegalFilter
}

input LinkedResourcesItemsElemMatchFilter {
  and: [LinkedResourcesItemsFilter]
  or: [LinkedResourcesItemsFilter]
  nor: [LinkedResourcesItemsFilter]
  not: LinkedResourcesItemsFilter
}

input LinkedResourcesItemsFilter {
  eq: NULL
  ne: NULL
  category: StringFilter
  description: StringFilter
  thumbnail_url: URIFilter
  title: StringFilter
  type: StringFilter
  url: URIFilter
  and: [LinkedResourcesItemsFilter]
  or: [LinkedResourcesItemsFilter]
  nor: [LinkedResourcesItemsFilter]
  not: LinkedResourcesItemsFilter
}

input LinkedResourcesItemsListFilter {
  list_index_filter: LinkedResourcesItemsListIndexFilter
  eq: NULL
  ne: NULL
  category: StringFilter
  description: StringFilter
  thumbnail_url: URIFilter
  title: StringFilter
  type: StringFilter
  url: URIFilter
  and: [LinkedResourcesItemsFilter]
  or: [LinkedResourcesItemsFilter]
  nor: [LinkedResourcesItemsFilter]
  not: LinkedResourcesItemsFilter
}

input LinkedResourcesItemsListIndexFilter {
  condition: LinkedResourcesItemsFilter
  index: Int
}

input LogoFilter {
  eq: NULL
  ne: NULL
  url: URIFilter
  and: [LogoFilter]
  or: [LogoFilter]
  nor: [LogoFilter]
  not: LogoFilter
}

input MarketplaceFilter {
  eq: NULL
  ne: NULL
  enablement_status: StringFilter
  enablement_url: URIFilter
  listing_url: URIFilter
  published: BooleanFilter
  and: [MarketplaceFilter]
  or: [MarketplaceFilter]
  nor: [MarketplaceFilter]
  not: MarketplaceFilter
}

input QuickStartConfigurationFilter {
  eq: NULL
  ne: NULL
  instructions: StringFilter
  default_deploy_instructions: BooleanFilter
  and: [QuickStartConfigurationFilter]
  or: [QuickStartConfigurationFilter]
  nor: [QuickStartConfigurationFilter]
  not: QuickStartConfigurationFilter
}

input SearchAliasesItemsElemMatchFilter {
  and: [SearchAliasesItemsFilter]
  or: [SearchAliasesItemsFilter]
  nor: [SearchAliasesItemsFilter]
  not: SearchAliasesItemsFilter
}

input SearchAliasesItemsFilter {
  eq: NULL
  ne: NULL
  key: StringFilter
  value: StringFilter
  and: [SearchAliasesItemsFilter]
  or: [SearchAliasesItemsFilter]
  nor: [SearchAliasesItemsFilter]
  not: SearchAliasesItemsFilter
}

input SearchAliasesItemsListFilter {
  list_index_filter: SearchAliasesItemsListIndexFilter
  eq: NULL
  ne: NULL
  key: StringFilter
  value: StringFilter
  and: [SearchAliasesItemsFilter]
  or: [SearchAliasesItemsFilter]
  nor: [SearchAliasesItemsFilter]
  not: SearchAliasesItemsFilter
}

input SearchAliasesItemsListIndexFilter {
  condition: SearchAliasesItemsFilter
  index: Int
}

input SupportFilter {
  eq: NULL
  ne: NULL
  description: StringFilter
  email_address: EmailFilter
  phone_number: StringFilter
  url: URIFilter
  and: [SupportFilter]
  or: [SupportFilter]
  nor: [SupportFilter]
  not: SupportFilter
}

input OperatorBundlesItemsElemMatchFilter {
  and: [OperatorBundlesItemsFilter]
  or: [OperatorBundlesItemsFilter]
  nor: [OperatorBundlesItemsFilter]
  not: OperatorBundlesItemsFilter
}

input OperatorBundlesItemsFilter {
  eq: NULL
  ne: NULL
  _id: ObjectIDFilter
  package: StringFilter
  capabilities_size: IntFilter
  capabilities: StringListFilter
  ocp_version: SemVerFilter
  annotations: OperatorBundleAnnotationFilter
  and: [OperatorBundlesItemsFilter]
  or: [OperatorBundlesItemsFilter]
  nor: [OperatorBundlesItemsFilter]
  not: OperatorBundlesItemsFilter
}

input SemVerFilter {
  eq: SemVerFilterScalar
  ne: SemVerFilterScalar
  le: SemVerFilterScalar
  lt: SemVerFilterScalar
  ge: SemVerFilterScalar
  gt: SemVerFilterScalar
  in: [SemVerFilterScalar]
  out: [SemVerFilterScalar]
}

scalar SemVerFilterScalar

input OperatorBundleAnnotationFilter {
  eq: NULL
  ne: NULL
  infrastructure_features_size: IntFilter
  infrastructure_features: StringListFilter
  valid_subscription_size: IntFilter
  valid_subscription: StringListFilter
  and: [OperatorBundleAnnotationFilter]
  or: [OperatorBundleAnnotationFilter]
  nor: [OperatorBundleAnnotationFilter]
  not: OperatorBundleAnnotationFilter
}

input OperatorBundlesItemsListFilter {
  list_index_filter: OperatorBundlesItemsListIndexFilter
  eq: NULL
  ne: NULL
  _id: ObjectIDFilter
  package: StringFilter
  capabilities_size: IntFilter
  capabilities: StringListFilter
  ocp_version: SemVerFilter
  annotations: OperatorBundleAnnotationFilter
  and: [OperatorBundlesItemsFilter]
  or: [OperatorBundlesItemsFilter]
  nor: [OperatorBundlesItemsFilter]
  not: OperatorBundlesItemsFilter
}

input OperatorBundlesItemsListIndexFilter {
  condition: OperatorBundlesItemsFilter
  index: Int
}

type ContainerRepositoryPaginatedResponse {
  data: [ContainerRepository]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

input ContainerRepositoryFilter {
  eq: NULL
  ne: NULL
  application_categories_size: IntFilter
  application_categories: StringListFilter
  architectures_size: IntFilter
  architectures: StringListFilter
  auto_rebuild_tags_size: IntFilter
  auto_rebuild_tags: StringListFilter
  beta: BooleanFilter
  build_categories_size: IntFilter
  build_categories: StringListFilter
  can_auto_release_cve_rebuild: BooleanFilter
  cdn_base_url: URIFilter
  content_sets_size: IntFilter
  content_sets: StringListFilter
  content_stream_grades_size: IntFilter
  content_stream_grades_elemMatch: RepositoryContentStreamGradesElemMatchFilter
  content_stream_grades: RepositoryContentStreamGradesListFilter
  content_stream_tags_size: IntFilter
  content_stream_tags: StringListFilter
  deprecated: BooleanFilter
  description: StringFilter
  display_data: RepositoryDisplayDataFilter
  documentation_links_size: IntFilter
  documentation_links_elemMatch: RepositoryDocumentationLinkElemMatchFilter
  documentation_links: RepositoryDocumentationLinkListFilter
  fbc_opt_in: BooleanFilter
  eol_date: DateTimeFilter
  freshness_grades_unknown_until_date: DateTimeFilter
  includes_multiple_content_streams: BooleanFilter
  is_community_supported: BooleanFilter
  isv_pid: StringFilter
  label_override: RepositoryLabelOverrideFilter
  metadata_source: StringFilter
  metrics: RepositoryMetricsFilter
  namespace: StringFilter
  non_production_only: BooleanFilter
  object_type: StringFilter
  privileged_images_allowed: BooleanFilter
  prm_project_id: StringFilter
  product_id: StringFilter
  product_listings_size: IntFilter
  product_listings: ObjectIDListFilter
  product_versions_size: IntFilter
  product_versions: StringListFilter
  protected_for_pull: BooleanFilter
  protected_for_search: BooleanFilter
  published: BooleanFilter
  registry: StringFilter
  registry_target: StringFilter
  release_categories_size: IntFilter
  release_categories: StringListFilter
  replaced_by_repository_name: StringFilter
  repository: StringFilter
  requires_terms: BooleanFilter
  runs_on: RepositoryRunsOnFilter
  source_container_image_enabled: BooleanFilter
  support_levels_size: IntFilter
  support_levels: StringListFilter
  tech_preview: BooleanFilter
  total_size_bytes: Int64Filter
  total_uncompressed_size_bytes: Int64Filter
  ui_get_this_image_override: StringFilter
  vendor_label: StringFilter
  marketplace: ContainerRepositoryMarketplaceFilter
  _id: ObjectIDFilter
  creation_date: DateTimeFilter
  last_update_date: DateTimeFilter
  and: [ContainerRepositoryFilter]
  or: [ContainerRepositoryFilter]
  nor: [ContainerRepositoryFilter]
  not: ContainerRepositoryFilter
}

input RepositoryContentStreamGradesElemMatchFilter {
  and: [RepositoryContentStreamGradesFilter]
  or: [RepositoryContentStreamGradesFilter]
  nor: [RepositoryContentStreamGradesFilter]
  not: RepositoryContentStreamGradesFilter
}

input RepositoryContentStreamGradesFilter {
  eq: NULL
  ne: NULL
  tag: StringFilter
  grade: StringFilter
  image_ids_size: IntFilter
  image_ids_elemMatch: GradesImageIdsElemMatchFilter
  image_ids: GradesImageIdsListFilter
  and: [RepositoryContentStreamGradesFilter]
  or: [RepositoryContentStreamGradesFilter]
  nor: [RepositoryContentStreamGradesFilter]
  not: RepositoryContentStreamGradesFilter
}

input GradesImageIdsElemMatchFilter {
  and: [GradesImageIdsFilter]
  or: [GradesImageIdsFilter]
  nor: [GradesImageIdsFilter]
  not: GradesImageIdsFilter
}

input GradesImageIdsFilter {
  eq: NULL
  ne: NULL
  id: StringFilter
  arch: StringFilter
  and: [GradesImageIdsFilter]
  or: [GradesImageIdsFilter]
  nor: [GradesImageIdsFilter]
  not: GradesImageIdsFilter
}

input GradesImageIdsListFilter {
  list_index_filter: GradesImageIdsListIndexFilter
  eq: NULL
  ne: NULL
  id: StringFilter
  arch: StringFilter
  and: [GradesImageIdsFilter]
  or: [GradesImageIdsFilter]
  nor: [GradesImageIdsFilter]
  not: GradesImageIdsFilter
}

input GradesImageIdsListIndexFilter {
  condition: GradesImageIdsFilter
  index: Int
}

input RepositoryContentStreamGradesListFilter {
  list_index_filter: RepositoryContentStreamGradesListIndexFilter
  eq: NULL
  ne: NULL
  tag: StringFilter
  grade: StringFilter
  image_ids_size: IntFilter
  image_ids_elemMatch: GradesImageIdsElemMatchFilter
  image_ids: GradesImageIdsListFilter
  and: [RepositoryContentStreamGradesFilter]
  or: [RepositoryContentStreamGradesFilter]
  nor: [RepositoryContentStreamGradesFilter]
  not: RepositoryContentStreamGradesFilter
}

input RepositoryContentStreamGradesListIndexFilter {
  condition: RepositoryContentStreamGradesFilter
  index: Int
}

input RepositoryDisplayDataFilter {
  eq: NULL
  ne: NULL
  long_description: StringFilter
  long_description_markdown: StringFilter
  name: StringFilter
  openshift_tags: StringFilter
  short_description: StringFilter
  and: [RepositoryDisplayDataFilter]
  or: [RepositoryDisplayDataFilter]
  nor: [RepositoryDisplayDataFilter]
  not: RepositoryDisplayDataFilter
}

input RepositoryDocumentationLinkElemMatchFilter {
  and: [RepositoryDocumentationLinkFilter]
  or: [RepositoryDocumentationLinkFilter]
  nor: [RepositoryDocumentationLinkFilter]
  not: RepositoryDocumentationLinkFilter
}

input RepositoryDocumentationLinkFilter {
  eq: NULL
  ne: NULL
  title: StringFilter
  type: StringFilter
  url: URIFilter
  and: [RepositoryDocumentationLinkFilter]
  or: [RepositoryDocumentationLinkFilter]
  nor: [RepositoryDocumentationLinkFilter]
  not: RepositoryDocumentationLinkFilter
}

input RepositoryDocumentationLinkListFilter {
  list_index_filter: RepositoryDocumentationLinkListIndexFilter
  eq: NULL
  ne: NULL
  title: StringFilter
  type: StringFilter
  url: URIFilter
  and: [RepositoryDocumentationLinkFilter]
  or: [RepositoryDocumentationLinkFilter]
  nor: [RepositoryDocumentationLinkFilter]
  not: RepositoryDocumentationLinkFilter
}

input RepositoryDocumentationLinkListIndexFilter {
  condition: RepositoryDocumentationLinkFilter
  index: Int
}

input RepositoryLabelOverrideFilter {
  eq: NULL
  ne: NULL
  description: StringFilter
  io_k8s_displayName: StringFilter
  io_openshift_tags: StringFilter
  summary: StringFilter
  and: [RepositoryLabelOverrideFilter]
  or: [RepositoryLabelOverrideFilter]
  nor: [RepositoryLabelOverrideFilter]
  not: RepositoryLabelOverrideFilter
}

input RepositoryMetricsFilter {
  eq: NULL
  ne: NULL
  last_update_date: DateTimeFilter
  pulls_in_last_30_days: IntFilter
  and: [RepositoryMetricsFilter]
  or: [RepositoryMetricsFilter]
  nor: [RepositoryMetricsFilter]
  not: RepositoryMetricsFilter
}

input RepositoryRunsOnFilter {
  eq: NULL
  ne: NULL
  openshift_online: BooleanFilter
  and: [RepositoryRunsOnFilter]
  or: [RepositoryRunsOnFilter]
  nor: [RepositoryRunsOnFilter]
  not: RepositoryRunsOnFilter
}

input ContainerRepositoryMarketplaceFilter {
  eq: NULL
  ne: NULL
  listing_url: URIFilter
  and: [ContainerRepositoryMarketplaceFilter]
  or: [ContainerRepositoryMarketplaceFilter]
  nor: [ContainerRepositoryMarketplaceFilter]
  not: ContainerRepositoryMarketplaceFilter
}

type OperatorBundlePaginatedResponse {
  data: [OperatorBundle]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

"""
An Operator Bundle is a container image that stores the Kubernetes manifests and metadata associated with an operator. A bundle is meant to represent a specific version of an operator.
"""
type OperatorBundle {
  """Specific information from the CSV requested by customer."""
  alm_examples: [ALMExample]

  """
  A subset of the \"metadata.annotations\" object from the CSV. Any annotations that are in the \"operators.openshift.io\" namespace that are strings of JSON will be expanded if it is valid JSON. Namespaces are not preserved due to their usage of special characters and all dashes are converted to underscores for consistency with other fields.
  """
  annotations: OperatorBundleAnnotation

  """
  List of all supported architectures. An empty list means that architectures are unknown as CSV doesn't include architecture labels.
  """
  architectures: [String]

  """
  The 'bundle' is the operator representation of a version of operator metadata. There is one bundle per operator/package channel for a particular OpenShift version.
  """
  bundle: String

  """Pullspec of the operator bundle e.g. quay.io/foo/bar@sha256:digest."""
  bundle_path: String

  """Digest from the bundle_path."""
  bundle_path_digest: String

  """Specific information from the CSV requested by customer."""
  capabilities: [String]

  """
  The channel for which this bundle is being released, e.g. \"amq-streams-1.5.x.
  """
  channel_name: String

  """Full name of the package. Usually consists of package_name.version."""
  csv_name: String

  """A public name to identify the Operator."""
  csv_display_name: String

  """
  A thorough description of the Operator’s functionality in form of a markdown blob.
  """
  csv_description: String

  """Short description of the CRD and operator functionality."""
  csv_metadata_description: String

  """Indicate if the bundle is in an index image."""
  in_index_img: Boolean

  """Specific information from the CSV requested by customer."""
  install_modes: [OperatorBundleInstallMode]

  """
  If true then the channel is the default for this package, false otherwise.
  """
  is_default_channel: Boolean

  """
  Indicate that the bundle is the latest version of a package in a channel for its associated OCP version (index image).
  """
  latest_in_channel: Boolean

  """Specific OCP version for this bundle, e.g. \"4.5\"."""
  ocp_version: SemVer

  """Organization as understood by iib, e.g. \"redhat-marketplace\"."""
  organization: String

  """The name of the operator, e.g. \"amq-streams\"."""
  package: String

  """
  Specific information from the CSV requested by customer. Should correspond with values from alm_examples.
  """
  provided_apis: [ProvidedAPIsItems]

  """Specific information from the CSV requested by customer."""
  related_images: [RelatedImagesItems]

  """Where this bundle was collected from, e.g. \"quay.io/foo/bar:v4.5\"."""
  source_index_container_path: String

  """The operator version for this bundle"""
  version: SemVer

  """Original version of the bundle, used to recognize semver validity."""
  version_original: String

  """Name of operator which the bundle replaces."""
  replaces: String

  """
  List of skipped updates. See OLM upgrades documentation for more details.
  """
  skips: [String]

  """String describing skipped versions."""
  skip_range: String

  """String describing bundle provider"""
  provider: String

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime
}

"""Specific information from the CSV requested by customer."""
type ALMExample {
  """"""
  api_version: String

  """"""
  kind: String

  """"""
  metadata: Dictionary

  """"""
  spec: Dictionary
}

scalar Dictionary

"""Specific information from the CSV requested by customer."""
type OperatorBundleInstallMode {
  supported: Boolean
  type: String
}

"""
Specific information from the CSV requested by customer.Should correspond with values from alm_examples.
"""
type ProvidedAPIsItems {
  group: String
  kind: String
  plural: String
  version: String
}

"""Specific information from the CSV requested by customer."""
type RelatedImagesItems {
  digest: String
  image: String
  name: String
}

input OperatorBundleFilter {
  eq: NULL
  ne: NULL
  alm_examples_size: IntFilter
  alm_examples_elemMatch: ALMExampleElemMatchFilter
  alm_examples: ALMExampleListFilter
  annotations: OperatorBundleAnnotationFilter
  architectures_size: IntFilter
  architectures: StringListFilter
  bundle: StringFilter
  bundle_path: StringFilter
  bundle_path_digest: StringFilter
  capabilities_size: IntFilter
  capabilities: StringListFilter
  channel_name: StringFilter
  csv_name: StringFilter
  csv_display_name: StringFilter
  csv_description: StringFilter
  csv_metadata_description: StringFilter
  in_index_img: BooleanFilter
  install_modes_size: IntFilter
  install_modes_elemMatch: OperatorBundleInstallModeElemMatchFilter
  install_modes: OperatorBundleInstallModeListFilter
  is_default_channel: BooleanFilter
  latest_in_channel: BooleanFilter
  ocp_version: SemVerFilter
  organization: StringFilter
  package: StringFilter
  provided_apis_size: IntFilter
  provided_apis_elemMatch: ProvidedAPIsItemsElemMatchFilter
  provided_apis: ProvidedAPIsItemsListFilter
  related_images_size: IntFilter
  related_images_elemMatch: RelatedImagesItemsElemMatchFilter
  related_images: RelatedImagesItemsListFilter
  source_index_container_path: StringFilter
  version: SemVerFilter
  version_original: StringFilter
  replaces: StringFilter
  skips_size: IntFilter
  skips: StringListFilter
  skip_range: StringFilter
  provider: StringFilter
  _id: ObjectIDFilter
  creation_date: DateTimeFilter
  last_update_date: DateTimeFilter
  and: [OperatorBundleFilter]
  or: [OperatorBundleFilter]
  nor: [OperatorBundleFilter]
  not: OperatorBundleFilter
}

input ALMExampleElemMatchFilter {
  and: [ALMExampleFilter]
  or: [ALMExampleFilter]
  nor: [ALMExampleFilter]
  not: ALMExampleFilter
}

input ALMExampleFilter {
  eq: NULL
  ne: NULL
  api_version: StringFilter
  kind: StringFilter
  metadata: StringFilter
  spec: StringFilter
  and: [ALMExampleFilter]
  or: [ALMExampleFilter]
  nor: [ALMExampleFilter]
  not: ALMExampleFilter
}

input ALMExampleListFilter {
  list_index_filter: ALMExampleListIndexFilter
  eq: NULL
  ne: NULL
  api_version: StringFilter
  kind: StringFilter
  metadata: StringFilter
  spec: StringFilter
  and: [ALMExampleFilter]
  or: [ALMExampleFilter]
  nor: [ALMExampleFilter]
  not: ALMExampleFilter
}

input ALMExampleListIndexFilter {
  condition: ALMExampleFilter
  index: Int
}

input OperatorBundleInstallModeElemMatchFilter {
  and: [OperatorBundleInstallModeFilter]
  or: [OperatorBundleInstallModeFilter]
  nor: [OperatorBundleInstallModeFilter]
  not: OperatorBundleInstallModeFilter
}

input OperatorBundleInstallModeFilter {
  eq: NULL
  ne: NULL
  supported: BooleanFilter
  type: StringFilter
  and: [OperatorBundleInstallModeFilter]
  or: [OperatorBundleInstallModeFilter]
  nor: [OperatorBundleInstallModeFilter]
  not: OperatorBundleInstallModeFilter
}

input OperatorBundleInstallModeListFilter {
  list_index_filter: OperatorBundleInstallModeListIndexFilter
  eq: NULL
  ne: NULL
  supported: BooleanFilter
  type: StringFilter
  and: [OperatorBundleInstallModeFilter]
  or: [OperatorBundleInstallModeFilter]
  nor: [OperatorBundleInstallModeFilter]
  not: OperatorBundleInstallModeFilter
}

input OperatorBundleInstallModeListIndexFilter {
  condition: OperatorBundleInstallModeFilter
  index: Int
}

input ProvidedAPIsItemsElemMatchFilter {
  and: [ProvidedAPIsItemsFilter]
  or: [ProvidedAPIsItemsFilter]
  nor: [ProvidedAPIsItemsFilter]
  not: ProvidedAPIsItemsFilter
}

input ProvidedAPIsItemsFilter {
  eq: NULL
  ne: NULL
  group: StringFilter
  kind: StringFilter
  plural: StringFilter
  version: StringFilter
  and: [ProvidedAPIsItemsFilter]
  or: [ProvidedAPIsItemsFilter]
  nor: [ProvidedAPIsItemsFilter]
  not: ProvidedAPIsItemsFilter
}

input ProvidedAPIsItemsListFilter {
  list_index_filter: ProvidedAPIsItemsListIndexFilter
  eq: NULL
  ne: NULL
  group: StringFilter
  kind: StringFilter
  plural: StringFilter
  version: StringFilter
  and: [ProvidedAPIsItemsFilter]
  or: [ProvidedAPIsItemsFilter]
  nor: [ProvidedAPIsItemsFilter]
  not: ProvidedAPIsItemsFilter
}

input ProvidedAPIsItemsListIndexFilter {
  condition: ProvidedAPIsItemsFilter
  index: Int
}

input RelatedImagesItemsElemMatchFilter {
  and: [RelatedImagesItemsFilter]
  or: [RelatedImagesItemsFilter]
  nor: [RelatedImagesItemsFilter]
  not: RelatedImagesItemsFilter
}

input RelatedImagesItemsFilter {
  eq: NULL
  ne: NULL
  digest: StringFilter
  image: StringFilter
  name: StringFilter
  and: [RelatedImagesItemsFilter]
  or: [RelatedImagesItemsFilter]
  nor: [RelatedImagesItemsFilter]
  not: RelatedImagesItemsFilter
}

input RelatedImagesItemsListFilter {
  list_index_filter: RelatedImagesItemsListIndexFilter
  eq: NULL
  ne: NULL
  digest: StringFilter
  image: StringFilter
  name: StringFilter
  and: [RelatedImagesItemsFilter]
  or: [RelatedImagesItemsFilter]
  nor: [RelatedImagesItemsFilter]
  not: RelatedImagesItemsFilter
}

input RelatedImagesItemsListIndexFilter {
  condition: RelatedImagesItemsFilter
  index: Int
}

type ContainerImageEdges {
  """Get the RPM manifest for an image"""
  rpm_manifest: ContainerImageRPMManifestResponse
  vulnerabilities(page_size: Int = 50, page: Int = 0, filter: ContainerImageVulnerabilityFilter, sort_by: [SortBy]): ContainerImageVulnerabilityPaginatedResponse
  test_results(page_size: Int = 50, page: Int = 0, filter: CertProjectTestResultFilter, sort_by: [SortBy]): CertProjectTestResultPaginatedResponse
  artifacts(page_size: Int = 50, page: Int = 0, filter: CertProjectArtifactFilter, sort_by: [SortBy]): CertProjectArtifactPaginatedResponse
  requests(page_size: Int = 50, page: Int = 0, filter: CertProjectImageRequestFilter, sort_by: [SortBy]): CertProjectImageRequestPaginatedResponse

  """Component manifest associated with the image."""
  content_manifest: ContentManifestResponse

  """Components associated with the image."""
  content_manifest_components(page: Int = 0, page_size: Int = 50, sort_by: [SortBy], filter: ContentManifestComponentFilter): ContentManifestComponentPaginatedResponse
}

type ContainerImageRPMManifestResponse {
  data: ContainerImageRPMManifest
  error: ResponseError
}

"""
A containerImageRPMManifest contains all the RPM packages for a given containerImage
"""
type ContainerImageRPMManifest {
  """The foreign key to containerImage._id."""
  image_id: String
  object_type: String

  """Content manifest of this image. RPM content included in the image."""
  rpms: [RpmsItems]

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime
  edges: ContainerImageRPMManifestEdges
}

"""RPM content of an image."""
type RpmsItems {
  """RPM architecture."""
  architecture: String

  """GPG key used to sign the RPM."""
  gpg: String

  """RPM name."""
  name: String

  """RPM name, version, release, and architecture."""
  nvra: String

  """RPM release."""
  release: String

  """Source RPM name."""
  srpm_name: String

  """Source RPM NEVRA (name, epoch, version, release, architecture)."""
  srpm_nevra: String

  """RPM summary."""
  summary: String

  """RPM version."""
  version: String
}

type ContainerImageRPMManifestEdges {
  image: ContainerImageResponse
}

type CertProjectTestResultPaginatedResponse {
  data: [CertProjectTestResult]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

"""Contain certification test results of related certProject"""
type CertProjectTestResult {
  """Unique identifier for the certification project."""
  cert_project: ObjectID

  """Hashed content for the certification project."""
  certification_hash: String

  """Image associated with the test result."""
  image: String

  """Operator package name associated with the test result."""
  operator_package_name: String

  """Whether or not the test has passed overall."""
  passed: Boolean

  """Identifier of container image collection."""
  image_id: ObjectID

  """The test results stored in lists based on result status."""
  results: Results

  """The test library of the test result."""
  test_library: TestLibrary

  """Version associated with the content tested."""
  version: String

  """Pull request of certification test results"""
  pull_request: PullRequest

  """A platform where tests were executed."""
  tested_on: TestedOn

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime

  """
  Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  """
  org_id: Int
  edges: CertProjectTestResultEdges
}

"""The test results stored in lists based on result status."""
type Results {
  """Test results of cert project certification"""
  failed: [TestResults]

  """Test results of cert project certification"""
  errors: [TestResults]

  """Test results of cert project certification"""
  passed: [TestResults]
}

"""The cert project pipeline test result."""
type TestResults {
  check_url: URI
  description: String
  elapsed_time: Float
  help: String
  knowledgebase_url: URI
  name: String
  suggestion: String
}

"""The test library of the test result."""
type TestLibrary {
  commit: String
  name: String
  version: String
}

"""Pull request of certification test results."""
type PullRequest {
  """Pull request URL"""
  url: URI

  """Pull request identifier"""
  id: Int

  """Pull request status"""
  status: String
}

"""A platform where tests were executed."""
type TestedOn {
  name: String
  version: String
}

type CertProjectTestResultEdges {
  cert_project: CertificationProjectResponse
  container_image: ContainerImageResponse
}

type CertificationProjectResponse {
  data: CertificationProject
  error: ResponseError
}

input CertProjectTestResultFilter {
  eq: NULL
  ne: NULL
  cert_project: ObjectIDFilter
  certification_hash: StringFilter
  image: StringFilter
  operator_package_name: StringFilter
  passed: BooleanFilter
  image_id: ObjectIDFilter
  results: ResultsFilter
  test_library: TestLibraryFilter
  version: StringFilter
  pull_request: PullRequestFilter
  tested_on: TestedOnFilter
  _id: ObjectIDFilter
  creation_date: DateTimeFilter
  last_update_date: DateTimeFilter
  org_id: IntFilter
  and: [CertProjectTestResultFilter]
  or: [CertProjectTestResultFilter]
  nor: [CertProjectTestResultFilter]
  not: CertProjectTestResultFilter
}

input ResultsFilter {
  eq: NULL
  ne: NULL
  failed_size: IntFilter
  failed_elemMatch: TestResultsElemMatchFilter
  failed: TestResultsListFilter
  errors_size: IntFilter
  errors_elemMatch: TestResultsElemMatchFilter
  errors: TestResultsListFilter
  passed_size: IntFilter
  passed_elemMatch: TestResultsElemMatchFilter
  passed: TestResultsListFilter
  and: [ResultsFilter]
  or: [ResultsFilter]
  nor: [ResultsFilter]
  not: ResultsFilter
}

input TestResultsElemMatchFilter {
  and: [TestResultsFilter]
  or: [TestResultsFilter]
  nor: [TestResultsFilter]
  not: TestResultsFilter
}

input TestResultsFilter {
  eq: NULL
  ne: NULL
  check_url: URIFilter
  description: StringFilter
  elapsed_time: FloatFilter
  help: StringFilter
  knowledgebase_url: URIFilter
  name: StringFilter
  suggestion: StringFilter
  and: [TestResultsFilter]
  or: [TestResultsFilter]
  nor: [TestResultsFilter]
  not: TestResultsFilter
}

input FloatFilter {
  eq: Float
  ne: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  in: [Float]
  out: [Float]
}

input TestResultsListFilter {
  list_index_filter: TestResultsListIndexFilter
  eq: NULL
  ne: NULL
  check_url: URIFilter
  description: StringFilter
  elapsed_time: FloatFilter
  help: StringFilter
  knowledgebase_url: URIFilter
  name: StringFilter
  suggestion: StringFilter
  and: [TestResultsFilter]
  or: [TestResultsFilter]
  nor: [TestResultsFilter]
  not: TestResultsFilter
}

input TestResultsListIndexFilter {
  condition: TestResultsFilter
  index: Int
}

input TestLibraryFilter {
  eq: NULL
  ne: NULL
  commit: StringFilter
  name: StringFilter
  version: StringFilter
  and: [TestLibraryFilter]
  or: [TestLibraryFilter]
  nor: [TestLibraryFilter]
  not: TestLibraryFilter
}

input PullRequestFilter {
  eq: NULL
  ne: NULL
  url: URIFilter
  id: IntFilter
  status: StringFilter
  and: [PullRequestFilter]
  or: [PullRequestFilter]
  nor: [PullRequestFilter]
  not: PullRequestFilter
}

input TestedOnFilter {
  eq: NULL
  ne: NULL
  name: StringFilter
  version: StringFilter
  and: [TestedOnFilter]
  or: [TestedOnFilter]
  nor: [TestedOnFilter]
  not: TestedOnFilter
}

type CertProjectArtifactPaginatedResponse {
  data: [CertProjectArtifact]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

"""
Contains the logs from the preflight test results from operator pipelines project
"""
type CertProjectArtifact {
  """Cert Project Identifier."""
  cert_project: ObjectID

  """Content version."""
  version: String

  """The operator package name of the cert project artifact."""
  operator_package_name: String

  """The cert project hashed content."""
  certification_hash: String

  """Identifier of container image collection."""
  image_id: ObjectID

  """Base64 encoded the cert project artifact content."""
  content: Base64EncodedString

  """The content type associated with the content type."""
  content_type: String

  """The file name associated with the content test results."""
  filename: String

  """File size in bytes."""
  file_size: Int64

  """URL to the Github pull request associated with with cert project."""
  pull_request_url: URI

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime

  """
  Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  """
  org_id: Int
  edges: CertProjectArtifactEdges
}

type CertProjectArtifactEdges {
  cert_project: CertificationProjectResponse
  container_image: ContainerImageResponse
}

input CertProjectArtifactFilter {
  eq: NULL
  ne: NULL
  cert_project: ObjectIDFilter
  version: StringFilter
  operator_package_name: StringFilter
  certification_hash: StringFilter
  image_id: ObjectIDFilter
  content: StringFilter
  content_type: StringFilter
  filename: StringFilter
  file_size: Int64Filter
  pull_request_url: URIFilter
  _id: ObjectIDFilter
  creation_date: DateTimeFilter
  last_update_date: DateTimeFilter
  org_id: IntFilter
  and: [CertProjectArtifactFilter]
  or: [CertProjectArtifactFilter]
  nor: [CertProjectArtifactFilter]
  not: CertProjectArtifactFilter
}

type CertProjectImageRequestPaginatedResponse {
  data: [CertProjectImageRequest]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

"""Contain status and related metadata of a certProject image request."""
type CertProjectImageRequest {
  """Unique identifier for the certification project."""
  cert_project: ObjectID

  """Container image id associated with the image request."""
  image_id: ObjectID

  """Operation performed during the image request."""
  operation: String

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime

  """
  Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  """
  org_id: Int

  """The request status"""
  status: String

  """An explanatory message to a request status."""
  status_message: String
  edges: CertProjectImageRequestEdges
}

type CertProjectImageRequestEdges {
  cert_project: CertificationProjectResponse
  image: ContainerImageResponse
}

input CertProjectImageRequestFilter {
  eq: NULL
  ne: NULL
  cert_project: ObjectIDFilter
  image_id: ObjectIDFilter
  operation: StringFilter
  _id: ObjectIDFilter
  creation_date: DateTimeFilter
  last_update_date: DateTimeFilter
  org_id: IntFilter
  status: StringFilter
  status_message: StringFilter
  and: [CertProjectImageRequestFilter]
  or: [CertProjectImageRequestFilter]
  nor: [CertProjectImageRequestFilter]
  not: CertProjectImageRequestFilter
}

type ContentManifestResponse {
  data: ContentManifest
  error: ResponseError
}

"""Stores a content manifest"""
type ContentManifest {
  """Associated container image."""
  image: ContentManifestImage

  """Associated components"""
  components: [ContentManifestContentManifestComponent]

  """Reasons for manifest incompleteness."""
  incompleteness_reasons: [ContentManifestIncompletenessReason]

  """
  Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  """
  org_id: Int

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime
  edges: ContentManifestEdges
}

"""Image manifest"""
type ContentManifestImage {
  """ID of the image."""
  _id: ObjectID

  """Subset of data from containerImage."""
  repositories: [ContentManifestImageRepository]
}

"""Container image repository details"""
type ContentManifestImageRepository {
  """Repository name."""
  repository: String

  """Hostname of the registry where the repository can be accessed."""
  registry: String

  """Available for multiarch images."""
  manifest_list_digest: String

  """Available for single arch images."""
  manifest_schema2_digest: String

  """Indicate if the image has been published to the container catalog."""
  published: Boolean
}

"""Subset of contentManifestComponent."""
type ContentManifestContentManifestComponent {
  """ID of the content manifest component."""
  _id: ObjectID

  """
  Type of the component. Classify as application if no more specific appropriate classification is available or cannot be determined for the component.
  """
  type: String

  """
  Name of the component. This will often be a shortened, single name of the component.
  """
  name: String

  """
  Version of the component. The version should ideally comply with semantic versioning but is not enforced.
  """
  version: String

  """
  Package URL of the component. If specified, MUST be valid and conform to the specification defined at https://github.com/package-url/purl-spec.
  """
  purl: String
}

"""Reason of ContentManifest incompleteness."""
type ContentManifestIncompletenessReason {
  """Type of incompleteness reason."""
  type: String

  """Description of the incompleteness reason."""
  description: String
}

type ContentManifestEdges {
  """Components associated with the manifest."""
  components(sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: ContentManifestComponentFilter): ContentManifestComponentPaginatedResponse

  """An image associated with the manifest."""
  image: ContainerImageResponse
}

type ContentManifestComponentPaginatedResponse {
  data: [ContentManifestComponent]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

"""
Stores software and hardware components associated with image manifests. Structure is based on the CycloneDX component. Link: https://cyclonedx.org/docs/1.4/json/#components
"""
type ContentManifestComponent {
  """
  Specifies the type of component. For software components, classify as 'application' if no more specific appropriate classification is available or cannot be determined for the component.
  """
  type: String

  """
  Associated manifest. Manifest cannot be disassociated after creating association with component.
  """
  content_manifest: ContentManifestComponentManifest

  """
  Data are synchronized upon association or when data in manifest or associated image changes.
  """
  image: ContentManifestComponentImage

  """
  When used on file components, the mime-type can provide additional context about the kind of file being represented such as an image, font, or executable. Some library or framework components may also have an associated mime-type.
  """
  mime_type: String

  """
  An identifier which can be used to reference the component elsewhere in the BOM. Uniqueness within the BOM is ensured checking unique combination od manifest._id and bom_ref.
  """
  bom_ref: String

  """
  The organization that supplied the component. The supplier may often be the manufacturer, but may also be a distributor or repackager.
  """
  supplier: Supplier

  """The person(s) or organization(s) that authored the component."""
  author: String

  """The person(s) or organization(s) that published the component."""
  publisher: String

  """
  The grouping name or identifier. This will often be a shortened, single name of the company or project that produced the component, or the source package or domain name. Whitespace and special characters should be avoided. Examples: apache, org.apache.commons, and apache.org.
  """
  group: String

  """
  The name of the component. This will often be a shortened, single name of the component. Examples: commons-lang3 and jquery
  """
  name: String

  """
  The component version. The version should ideally comply with semantic versioning but is not enforced.
  """
  version: String

  """Specifies a description for the component."""
  description: String

  """Specifies the scope of the component."""
  scope: String

  """Hashes of the component."""
  hashes: [ComponentHash]

  """Licenses of the component."""
  licenses: [ComponentLicense]

  """
  A copyright notice informing users of the underlying claims to copyright ownership in a published work.
  """
  copyright: String

  """
  Specifies the package-url (purl). The purl, if specified, MUST be valid and conform to the specification defined at: https://github.com/package-url/purl-spec
  """
  purl: String

  """
  Specifies metadata and content for ISO-IEC 19770-2 Software Identification (SWID) Tags. https://www.iso.org/standard/65666.html
  """
  swid: ComponentSwid

  """
  External references provide a way to document systems, sites, and information that may be relevant but which are not included with the BOM.
  """
  external_references: [ComponentExternalReference]

  """
  Provides the ability to document evidence collected through various forms of extraction or analysis.
  """
  evidence: ComponentEvidence

  """Specifies optional release notes."""
  release_notes: ComponentReleaseNotes

  """
  Defines if the container is used as a build dependency during multi-stage builds.
  """
  build_dependency: Boolean

  """
  Provides the ability to document properties in a name-value store. This provides flexibility to include data not officially supported in the standard without having to use additional namespaces or create extensions. Unlike key-value stores, properties support duplicate names, each potentially having different values. Property names of interest to the general public are encouraged to be registered in the CycloneDX Property Taxonomy (https://github.com/CycloneDX/cyclonedx-property-taxonomy). Formal registration is OPTIONAL.
  """
  properties: [ComponentProperties]

  """
  Specifies a well-formed CPE name that conforms to the CPE 2.2 or 2.3 specification. See https://nvd.nist.gov/products/cpe
  """
  cpe: String

  """
  Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  """
  org_id: Int

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime
  edges: ContentManifestComponentEdges
}

"""
Associated manifest. Manifest cannot be disassociated after creating association. Placeholder for embedding data from Manifest.
"""
type ContentManifestComponentManifest {
  """MongoDB unique _id"""
  _id: ObjectID
}

"""Embedded image data."""
type ContentManifestComponentImage {
  """MongoDB unique _id"""
  _id: ObjectID

  """Repositories associated with the container image."""
  repositories: [ContentManifestComponentImageRepository]
}

"""List of embedded images data"""
type ContentManifestComponentImageRepository {
  """Indicate if the image has been published to the container catalog."""
  published: Boolean

  """Hostname of the registry where the repository can be accessed."""
  registry: String

  """Repository name."""
  repository: String

  """Available for multiarch images."""
  manifest_list_digest: String

  """Available for single arch images."""
  manifest_schema2_digest: String
}

"""
The organization that supplied the component. The supplier may often be the manufacturer, but may also be a distributor or repackager.
"""
type Supplier {
  """The name of the organization."""
  name: String

  """The URL of the organization."""
  url: [URI]

  """A contact at the organization."""
  contact: SupplierContact
}

"""A contact at the organization."""
type SupplierContact {
  """The name of a contact."""
  name: String

  """The email address of the contact."""
  email: Email

  """The phone number of the contact."""
  phone: String
}

"""Component hash."""
type ComponentHash {
  """Hash algorithm."""
  alg: String

  """Hash."""
  content: String
}

"""Component license."""
type ComponentLicense {
  """License data."""
  license: License
}

"""License data."""
type License {
  """Optional license name."""
  name: String

  """An optional way to include the textual content of a license."""
  text: ComponentLicenseText

  """
  The URL to the license file. If specified, a 'license' externalReference should also be specified for completeness.
  """
  url: URI

  """A valid SPDX license ID."""
  id: String
}

"""An optional way to include the textual content of a license."""
type ComponentLicenseText {
  """
  Specifies the content type of the text. Defaults to text/plain if not specified.
  """
  content_type: String

  """Specifies the optional encoding the text is represented in."""
  encoding: String

  """
  The attachment data. Proactive controls such as input validation and sanitization should be employed to prevent misuse of attachment text.
  """
  content: String
}

"""
Specifies metadata and content for ISO-IEC 19770-2 Software Identification (SWID) Tags. https://www.iso.org/standard/65666.html
"""
type ComponentSwid {
  """Maps to the tagId of a softwareIdentity"""
  tag_id: String

  """Maps to the name of a SoftwareIdentity."""
  name: String

  """Maps to the version of a SoftwareIdentity"""
  version: String

  """Maps to the tagVersion of a SoftwareIdentity"""
  tag_version: Int

  """Maps to the patch of a SoftwareIdentity"""
  patch: Boolean

  """Specifies the metadata and content of the SWID tag."""
  text: SwidText

  """The URL to the SWID file."""
  url: URI
}

"""Specifies the metadata and content of the SWID tag."""
type SwidText {
  """
  Specifies the content type of the text. Defaults to text/plain if not specified.
  """
  content_type: String

  """Specifies the optional encoding the text is represented in."""
  encoding: String

  """
  The attachment data. Proactive controls such as input validation and sanitization should be employed to prevent misuse of attachment text.
  """
  content: String
}

"""
External references provide a way to document systems, sites, and information that may be relevant but which are not included with the BOM.
"""
type ComponentExternalReference {
  """The URL to the external reference."""
  url: String

  """An optional comment describing the external reference."""
  comment: String

  """
  Specifies the type of external reference. There are built-in types to describe common references. If a type does not exist for the reference being referred to, use the other type.
  """
  type: String

  """The hashes of the external reference (if applicable)."""
  hashes: [ExternalReferenceHash]
}

"""The hash of the external reference."""
type ExternalReferenceHash {
  """Hash algorithm."""
  alg: String

  """Hash."""
  content: String
}

"""
Provides the ability to document evidence collected through various forms of extraction or analysis.
"""
type ComponentEvidence {
  """Component evidence license data."""
  licenses: [ComponentEvidenceLicenses]

  """Component evidence copyright data."""
  copyright: [ComponentEvidenceCopyright]
}

"""Component evidence license data."""
type ComponentEvidenceLicenses {
  """License data."""
  license: EvidenceLicensesLicense
}

"""Component evidence license data."""
type EvidenceLicensesLicense {
  """
  If SPDX does not define the license, this field provides the license name.
  """
  name: String

  """An optional way to include the textual content of a license,"""
  text: EvidenceLicenseText

  """
  The URL to the license file. If specified, a 'license' externalReference should also be specified for completeness.
  """
  url: URI

  """A valid SPDX license ID."""
  id: String
}

"""An optional way to include the textual content of a license."""
type EvidenceLicenseText {
  """
  Specifies the content type of the text. Defaults to text/plain if not specified.
  """
  content_type: String

  """Specifies the optional encoding the text is represented in."""
  encoding: String

  """
  The attachment data. Proactive controls such as input validation and sanitization should be employed to prevent misuse of attachment text.
  """
  content: String
}

"""Copyright data."""
type ComponentEvidenceCopyright {
  """Copyright text."""
  text: String
}

"""Specifies optional release notes."""
type ComponentReleaseNotes {
  """The software versioning type the release note describes."""
  type: String

  """The title of the release."""
  title: String

  """
  The URL to an image that may be prominently displayed with the release note.
  """
  featured_image: URI

  """
  The URL to an image that may be used in messaging on a social media platforms.
  """
  social_image: URI

  """A short description of the release."""
  description: String

  """The date and time (timestamp) when the release note was created."""
  timestamp: String

  """
  One or more alternate names the release may be referred to. This may include unofficial terms used by development and marketing teams (e.g. code names).
  """
  aliases: [String]

  """
  One or more tags that may aid in search or retrieval of the release note.
  """
  tags: [String]

  """A collection of issues that have been resolved."""
  resolves: [ReleaseNotesResolves]

  """
  Zero or more release notes containing the locale and content. Multiple note objects may be specified to support release notes in a wide variety of languages.
  """
  notes: [ReleaseNotesNotes]

  """
  Provides the ability to document properties in a name-value store. This provides flexibility to include data not officially supported in the standard without having to use additional namespaces or create extensions. Unlike key-value stores, properties support duplicate names, each potentially having different values. Property names of interest to the general public are encouraged to be registered in the CycloneDX Property Taxonomy. Formal registration is OPTIONAL.
  """
  properties: [ReleaseNotesProperties]
}

"""An individual issue that has been resolved."""
type ReleaseNotesResolves {
  """Specifies the type of issue."""
  type: String

  """The identifier of the issue assigned by the source of the issue."""
  id: String

  """The name of the issue."""
  name: String

  """A description of the issue."""
  description: String

  """The source of the issue where it is documented."""
  source: ReleaseNotesResolvesSource

  """A collection of URLs for the reference. Multiple URLs are allowed."""
  references: [URI]
}

"""The source of the issue where it is documented."""
type ReleaseNotesResolvesSource {
  """
  The name of the source. For example 'National Vulnerability Database', 'NVD', and 'Apache'
  """
  name: String

  """The url of the issue documentation as provided by the source."""
  url: URI
}

"""A note containing the locale and content."""
type ReleaseNotesNotes {
  """
  The ISO-639 (or higher) language code and optional ISO-3166 (or higher) country code. Examples include: \"en\", \"en-US\", \"fr\" and \"fr-CA\".
  """
  locale: String

  """Specifies the full content of the release note."""
  text: ReleaseNotesText
}

"""Specifies the full content of the release note."""
type ReleaseNotesText {
  """
  Specifies the content type of the text. Defaults to text/plain if not specified.
  """
  content_type: String

  """Specifies the optional encoding the text is represented in."""
  encoding: String

  """
  The attachment data. Proactive controls such as input validation and sanitization should be employed to prevent misuse of attachment text.
  """
  content: String
}

"""
Provides the ability to document properties in a name-value store. This provides flexibility to include data not officially supported in the standard without having to use additional namespaces or create extensions. Unlike key-value stores, properties support duplicate names, each potentially having different values. Property names of interest to the general public are encouraged to be registered in the CycloneDX Property Taxonomy. Formal registration is OPTIONAL.
"""
type ReleaseNotesProperties {
  """
  The name of the property. Duplicate names are allowed, each potentially having a different value.
  """
  name: String

  """The value of the property."""
  value: String
}

"""
Provides the ability to document properties in a name-value store. This provides flexibility to include data not officially supported in the standard without having to use additional namespaces or create extensions. Unlike key-value stores, properties support duplicate names, each potentially having different values. Property names of interest to the general public are encouraged to be registered in the CycloneDX Property Taxonomy (https://github.com/CycloneDX/cyclonedx-property-taxonomy). Formal registration is OPTIONAL.
"""
type ComponentProperties {
  """
  The name of the property. Duplicate names are allowed, each potentially having a different value.
  """
  name: String

  """The value of the property."""
  value: String
}

type ContentManifestComponentEdges {
  """Component manifest associated with the component."""
  content_manifest: ContentManifestResponse

  """Image associated with the component."""
  image: ContainerImageResponse
}

input ContentManifestComponentFilter {
  eq: NULL
  ne: NULL
  type: StringFilter
  content_manifest: ContentManifestComponentManifestFilter
  image: ContentManifestComponentImageFilter
  mime_type: StringFilter
  bom_ref: StringFilter
  supplier: SupplierFilter
  author: StringFilter
  publisher: StringFilter
  group: StringFilter
  name: StringFilter
  version: StringFilter
  description: StringFilter
  scope: StringFilter
  hashes_size: IntFilter
  hashes_elemMatch: ComponentHashElemMatchFilter
  hashes: ComponentHashListFilter
  licenses_size: IntFilter
  licenses_elemMatch: ComponentLicenseElemMatchFilter
  licenses: ComponentLicenseListFilter
  copyright: StringFilter
  purl: StringFilter
  swid: ComponentSwidFilter
  external_references_size: IntFilter
  external_references_elemMatch: ComponentExternalReferenceElemMatchFilter
  external_references: ComponentExternalReferenceListFilter
  evidence: ComponentEvidenceFilter
  release_notes: ComponentReleaseNotesFilter
  build_dependency: BooleanFilter
  properties_size: IntFilter
  properties_elemMatch: ComponentPropertiesElemMatchFilter
  properties: ComponentPropertiesListFilter
  cpe: StringFilter
  org_id: IntFilter
  _id: ObjectIDFilter
  creation_date: DateTimeFilter
  last_update_date: DateTimeFilter
  and: [ContentManifestComponentFilter]
  or: [ContentManifestComponentFilter]
  nor: [ContentManifestComponentFilter]
  not: ContentManifestComponentFilter
}

input ContentManifestComponentManifestFilter {
  eq: NULL
  ne: NULL
  _id: ObjectIDFilter
  and: [ContentManifestComponentManifestFilter]
  or: [ContentManifestComponentManifestFilter]
  nor: [ContentManifestComponentManifestFilter]
  not: ContentManifestComponentManifestFilter
}

input ContentManifestComponentImageFilter {
  eq: NULL
  ne: NULL
  _id: ObjectIDFilter
  repositories_size: IntFilter
  repositories_elemMatch: ContentManifestComponentImageRepositoryElemMatchFilter
  repositories: ContentManifestComponentImageRepositoryListFilter
  and: [ContentManifestComponentImageFilter]
  or: [ContentManifestComponentImageFilter]
  nor: [ContentManifestComponentImageFilter]
  not: ContentManifestComponentImageFilter
}

input ContentManifestComponentImageRepositoryElemMatchFilter {
  and: [ContentManifestComponentImageRepositoryFilter]
  or: [ContentManifestComponentImageRepositoryFilter]
  nor: [ContentManifestComponentImageRepositoryFilter]
  not: ContentManifestComponentImageRepositoryFilter
}

input ContentManifestComponentImageRepositoryFilter {
  eq: NULL
  ne: NULL
  published: BooleanFilter
  registry: StringFilter
  repository: StringFilter
  manifest_list_digest: StringFilter
  manifest_schema2_digest: StringFilter
  and: [ContentManifestComponentImageRepositoryFilter]
  or: [ContentManifestComponentImageRepositoryFilter]
  nor: [ContentManifestComponentImageRepositoryFilter]
  not: ContentManifestComponentImageRepositoryFilter
}

input ContentManifestComponentImageRepositoryListFilter {
  list_index_filter: ContentManifestComponentImageRepositoryListIndexFilter
  eq: NULL
  ne: NULL
  published: BooleanFilter
  registry: StringFilter
  repository: StringFilter
  manifest_list_digest: StringFilter
  manifest_schema2_digest: StringFilter
  and: [ContentManifestComponentImageRepositoryFilter]
  or: [ContentManifestComponentImageRepositoryFilter]
  nor: [ContentManifestComponentImageRepositoryFilter]
  not: ContentManifestComponentImageRepositoryFilter
}

input ContentManifestComponentImageRepositoryListIndexFilter {
  condition: ContentManifestComponentImageRepositoryFilter
  index: Int
}

input SupplierFilter {
  eq: NULL
  ne: NULL
  name: StringFilter
  url_size: IntFilter
  url: URIListFilter
  contact: SupplierContactFilter
  and: [SupplierFilter]
  or: [SupplierFilter]
  nor: [SupplierFilter]
  not: SupplierFilter
}

input URIListFilter {
  list_index_filter: URIListIndexFilter
  eq: URI
  ne: URI
  le: URI
  lt: URI
  ge: URI
  gt: URI
  in: [URI]
  out: [URI]
  iregex: String
  regex: String
}

input URIListIndexFilter {
  condition: URIFilter
  index: Int
}

input SupplierContactFilter {
  eq: NULL
  ne: NULL
  name: StringFilter
  email: EmailFilter
  phone: StringFilter
  and: [SupplierContactFilter]
  or: [SupplierContactFilter]
  nor: [SupplierContactFilter]
  not: SupplierContactFilter
}

input ComponentHashElemMatchFilter {
  and: [ComponentHashFilter]
  or: [ComponentHashFilter]
  nor: [ComponentHashFilter]
  not: ComponentHashFilter
}

input ComponentHashFilter {
  eq: NULL
  ne: NULL
  alg: StringFilter
  content: StringFilter
  and: [ComponentHashFilter]
  or: [ComponentHashFilter]
  nor: [ComponentHashFilter]
  not: ComponentHashFilter
}

input ComponentHashListFilter {
  list_index_filter: ComponentHashListIndexFilter
  eq: NULL
  ne: NULL
  alg: StringFilter
  content: StringFilter
  and: [ComponentHashFilter]
  or: [ComponentHashFilter]
  nor: [ComponentHashFilter]
  not: ComponentHashFilter
}

input ComponentHashListIndexFilter {
  condition: ComponentHashFilter
  index: Int
}

input ComponentLicenseElemMatchFilter {
  and: [ComponentLicenseFilter]
  or: [ComponentLicenseFilter]
  nor: [ComponentLicenseFilter]
  not: ComponentLicenseFilter
}

input ComponentLicenseFilter {
  eq: NULL
  ne: NULL
  license: LicenseFilter
  and: [ComponentLicenseFilter]
  or: [ComponentLicenseFilter]
  nor: [ComponentLicenseFilter]
  not: ComponentLicenseFilter
}

input LicenseFilter {
  eq: NULL
  ne: NULL
  name: StringFilter
  text: ComponentLicenseTextFilter
  url: URIFilter
  id: StringFilter
  and: [LicenseFilter]
  or: [LicenseFilter]
  nor: [LicenseFilter]
  not: LicenseFilter
}

input ComponentLicenseTextFilter {
  eq: NULL
  ne: NULL
  content_type: StringFilter
  encoding: StringFilter
  content: StringFilter
  and: [ComponentLicenseTextFilter]
  or: [ComponentLicenseTextFilter]
  nor: [ComponentLicenseTextFilter]
  not: ComponentLicenseTextFilter
}

input ComponentLicenseListFilter {
  list_index_filter: ComponentLicenseListIndexFilter
  eq: NULL
  ne: NULL
  license: LicenseFilter
  and: [ComponentLicenseFilter]
  or: [ComponentLicenseFilter]
  nor: [ComponentLicenseFilter]
  not: ComponentLicenseFilter
}

input ComponentLicenseListIndexFilter {
  condition: ComponentLicenseFilter
  index: Int
}

input ComponentSwidFilter {
  eq: NULL
  ne: NULL
  tag_id: StringFilter
  name: StringFilter
  version: StringFilter
  tag_version: IntFilter
  patch: BooleanFilter
  text: SwidTextFilter
  url: URIFilter
  and: [ComponentSwidFilter]
  or: [ComponentSwidFilter]
  nor: [ComponentSwidFilter]
  not: ComponentSwidFilter
}

input SwidTextFilter {
  eq: NULL
  ne: NULL
  content_type: StringFilter
  encoding: StringFilter
  content: StringFilter
  and: [SwidTextFilter]
  or: [SwidTextFilter]
  nor: [SwidTextFilter]
  not: SwidTextFilter
}

input ComponentExternalReferenceElemMatchFilter {
  and: [ComponentExternalReferenceFilter]
  or: [ComponentExternalReferenceFilter]
  nor: [ComponentExternalReferenceFilter]
  not: ComponentExternalReferenceFilter
}

input ComponentExternalReferenceFilter {
  eq: NULL
  ne: NULL
  url: StringFilter
  comment: StringFilter
  type: StringFilter
  hashes_size: IntFilter
  hashes_elemMatch: ExternalReferenceHashElemMatchFilter
  hashes: ExternalReferenceHashListFilter
  and: [ComponentExternalReferenceFilter]
  or: [ComponentExternalReferenceFilter]
  nor: [ComponentExternalReferenceFilter]
  not: ComponentExternalReferenceFilter
}

input ExternalReferenceHashElemMatchFilter {
  and: [ExternalReferenceHashFilter]
  or: [ExternalReferenceHashFilter]
  nor: [ExternalReferenceHashFilter]
  not: ExternalReferenceHashFilter
}

input ExternalReferenceHashFilter {
  eq: NULL
  ne: NULL
  alg: StringFilter
  content: StringFilter
  and: [ExternalReferenceHashFilter]
  or: [ExternalReferenceHashFilter]
  nor: [ExternalReferenceHashFilter]
  not: ExternalReferenceHashFilter
}

input ExternalReferenceHashListFilter {
  list_index_filter: ExternalReferenceHashListIndexFilter
  eq: NULL
  ne: NULL
  alg: StringFilter
  content: StringFilter
  and: [ExternalReferenceHashFilter]
  or: [ExternalReferenceHashFilter]
  nor: [ExternalReferenceHashFilter]
  not: ExternalReferenceHashFilter
}

input ExternalReferenceHashListIndexFilter {
  condition: ExternalReferenceHashFilter
  index: Int
}

input ComponentExternalReferenceListFilter {
  list_index_filter: ComponentExternalReferenceListIndexFilter
  eq: NULL
  ne: NULL
  url: StringFilter
  comment: StringFilter
  type: StringFilter
  hashes_size: IntFilter
  hashes_elemMatch: ExternalReferenceHashElemMatchFilter
  hashes: ExternalReferenceHashListFilter
  and: [ComponentExternalReferenceFilter]
  or: [ComponentExternalReferenceFilter]
  nor: [ComponentExternalReferenceFilter]
  not: ComponentExternalReferenceFilter
}

input ComponentExternalReferenceListIndexFilter {
  condition: ComponentExternalReferenceFilter
  index: Int
}

input ComponentEvidenceFilter {
  eq: NULL
  ne: NULL
  licenses_size: IntFilter
  licenses_elemMatch: ComponentEvidenceLicensesElemMatchFilter
  licenses: ComponentEvidenceLicensesListFilter
  copyright_size: IntFilter
  copyright_elemMatch: ComponentEvidenceCopyrightElemMatchFilter
  copyright: ComponentEvidenceCopyrightListFilter
  and: [ComponentEvidenceFilter]
  or: [ComponentEvidenceFilter]
  nor: [ComponentEvidenceFilter]
  not: ComponentEvidenceFilter
}

input ComponentEvidenceLicensesElemMatchFilter {
  and: [ComponentEvidenceLicensesFilter]
  or: [ComponentEvidenceLicensesFilter]
  nor: [ComponentEvidenceLicensesFilter]
  not: ComponentEvidenceLicensesFilter
}

input ComponentEvidenceLicensesFilter {
  eq: NULL
  ne: NULL
  license: EvidenceLicensesLicenseFilter
  and: [ComponentEvidenceLicensesFilter]
  or: [ComponentEvidenceLicensesFilter]
  nor: [ComponentEvidenceLicensesFilter]
  not: ComponentEvidenceLicensesFilter
}

input EvidenceLicensesLicenseFilter {
  eq: NULL
  ne: NULL
  name: StringFilter
  text: EvidenceLicenseTextFilter
  url: URIFilter
  id: StringFilter
  and: [EvidenceLicensesLicenseFilter]
  or: [EvidenceLicensesLicenseFilter]
  nor: [EvidenceLicensesLicenseFilter]
  not: EvidenceLicensesLicenseFilter
}

input EvidenceLicenseTextFilter {
  eq: NULL
  ne: NULL
  content_type: StringFilter
  encoding: StringFilter
  content: StringFilter
  and: [EvidenceLicenseTextFilter]
  or: [EvidenceLicenseTextFilter]
  nor: [EvidenceLicenseTextFilter]
  not: EvidenceLicenseTextFilter
}

input ComponentEvidenceLicensesListFilter {
  list_index_filter: ComponentEvidenceLicensesListIndexFilter
  eq: NULL
  ne: NULL
  license: EvidenceLicensesLicenseFilter
  and: [ComponentEvidenceLicensesFilter]
  or: [ComponentEvidenceLicensesFilter]
  nor: [ComponentEvidenceLicensesFilter]
  not: ComponentEvidenceLicensesFilter
}

input ComponentEvidenceLicensesListIndexFilter {
  condition: ComponentEvidenceLicensesFilter
  index: Int
}

input ComponentEvidenceCopyrightElemMatchFilter {
  and: [ComponentEvidenceCopyrightFilter]
  or: [ComponentEvidenceCopyrightFilter]
  nor: [ComponentEvidenceCopyrightFilter]
  not: ComponentEvidenceCopyrightFilter
}

input ComponentEvidenceCopyrightFilter {
  eq: NULL
  ne: NULL
  text: StringFilter
  and: [ComponentEvidenceCopyrightFilter]
  or: [ComponentEvidenceCopyrightFilter]
  nor: [ComponentEvidenceCopyrightFilter]
  not: ComponentEvidenceCopyrightFilter
}

input ComponentEvidenceCopyrightListFilter {
  list_index_filter: ComponentEvidenceCopyrightListIndexFilter
  eq: NULL
  ne: NULL
  text: StringFilter
  and: [ComponentEvidenceCopyrightFilter]
  or: [ComponentEvidenceCopyrightFilter]
  nor: [ComponentEvidenceCopyrightFilter]
  not: ComponentEvidenceCopyrightFilter
}

input ComponentEvidenceCopyrightListIndexFilter {
  condition: ComponentEvidenceCopyrightFilter
  index: Int
}

input ComponentReleaseNotesFilter {
  eq: NULL
  ne: NULL
  type: StringFilter
  title: StringFilter
  featured_image: URIFilter
  social_image: URIFilter
  description: StringFilter
  timestamp: StringFilter
  aliases_size: IntFilter
  aliases: StringListFilter
  tags_size: IntFilter
  tags: StringListFilter
  resolves_size: IntFilter
  resolves_elemMatch: ReleaseNotesResolvesElemMatchFilter
  resolves: ReleaseNotesResolvesListFilter
  notes_size: IntFilter
  notes_elemMatch: ReleaseNotesNotesElemMatchFilter
  notes: ReleaseNotesNotesListFilter
  properties_size: IntFilter
  properties_elemMatch: ReleaseNotesPropertiesElemMatchFilter
  properties: ReleaseNotesPropertiesListFilter
  and: [ComponentReleaseNotesFilter]
  or: [ComponentReleaseNotesFilter]
  nor: [ComponentReleaseNotesFilter]
  not: ComponentReleaseNotesFilter
}

input ReleaseNotesResolvesElemMatchFilter {
  and: [ReleaseNotesResolvesFilter]
  or: [ReleaseNotesResolvesFilter]
  nor: [ReleaseNotesResolvesFilter]
  not: ReleaseNotesResolvesFilter
}

input ReleaseNotesResolvesFilter {
  eq: NULL
  ne: NULL
  type: StringFilter
  id: StringFilter
  name: StringFilter
  description: StringFilter
  source: ReleaseNotesResolvesSourceFilter
  references_size: IntFilter
  references: URIListFilter
  and: [ReleaseNotesResolvesFilter]
  or: [ReleaseNotesResolvesFilter]
  nor: [ReleaseNotesResolvesFilter]
  not: ReleaseNotesResolvesFilter
}

input ReleaseNotesResolvesSourceFilter {
  eq: NULL
  ne: NULL
  name: StringFilter
  url: URIFilter
  and: [ReleaseNotesResolvesSourceFilter]
  or: [ReleaseNotesResolvesSourceFilter]
  nor: [ReleaseNotesResolvesSourceFilter]
  not: ReleaseNotesResolvesSourceFilter
}

input ReleaseNotesResolvesListFilter {
  list_index_filter: ReleaseNotesResolvesListIndexFilter
  eq: NULL
  ne: NULL
  type: StringFilter
  id: StringFilter
  name: StringFilter
  description: StringFilter
  source: ReleaseNotesResolvesSourceFilter
  references_size: IntFilter
  references: URIListFilter
  and: [ReleaseNotesResolvesFilter]
  or: [ReleaseNotesResolvesFilter]
  nor: [ReleaseNotesResolvesFilter]
  not: ReleaseNotesResolvesFilter
}

input ReleaseNotesResolvesListIndexFilter {
  condition: ReleaseNotesResolvesFilter
  index: Int
}

input ReleaseNotesNotesElemMatchFilter {
  and: [ReleaseNotesNotesFilter]
  or: [ReleaseNotesNotesFilter]
  nor: [ReleaseNotesNotesFilter]
  not: ReleaseNotesNotesFilter
}

input ReleaseNotesNotesFilter {
  eq: NULL
  ne: NULL
  locale: StringFilter
  text: ReleaseNotesTextFilter
  and: [ReleaseNotesNotesFilter]
  or: [ReleaseNotesNotesFilter]
  nor: [ReleaseNotesNotesFilter]
  not: ReleaseNotesNotesFilter
}

input ReleaseNotesTextFilter {
  eq: NULL
  ne: NULL
  content_type: StringFilter
  encoding: StringFilter
  content: StringFilter
  and: [ReleaseNotesTextFilter]
  or: [ReleaseNotesTextFilter]
  nor: [ReleaseNotesTextFilter]
  not: ReleaseNotesTextFilter
}

input ReleaseNotesNotesListFilter {
  list_index_filter: ReleaseNotesNotesListIndexFilter
  eq: NULL
  ne: NULL
  locale: StringFilter
  text: ReleaseNotesTextFilter
  and: [ReleaseNotesNotesFilter]
  or: [ReleaseNotesNotesFilter]
  nor: [ReleaseNotesNotesFilter]
  not: ReleaseNotesNotesFilter
}

input ReleaseNotesNotesListIndexFilter {
  condition: ReleaseNotesNotesFilter
  index: Int
}

input ReleaseNotesPropertiesElemMatchFilter {
  and: [ReleaseNotesPropertiesFilter]
  or: [ReleaseNotesPropertiesFilter]
  nor: [ReleaseNotesPropertiesFilter]
  not: ReleaseNotesPropertiesFilter
}

input ReleaseNotesPropertiesFilter {
  eq: NULL
  ne: NULL
  name: StringFilter
  value: StringFilter
  and: [ReleaseNotesPropertiesFilter]
  or: [ReleaseNotesPropertiesFilter]
  nor: [ReleaseNotesPropertiesFilter]
  not: ReleaseNotesPropertiesFilter
}

input ReleaseNotesPropertiesListFilter {
  list_index_filter: ReleaseNotesPropertiesListIndexFilter
  eq: NULL
  ne: NULL
  name: StringFilter
  value: StringFilter
  and: [ReleaseNotesPropertiesFilter]
  or: [ReleaseNotesPropertiesFilter]
  nor: [ReleaseNotesPropertiesFilter]
  not: ReleaseNotesPropertiesFilter
}

input ReleaseNotesPropertiesListIndexFilter {
  condition: ReleaseNotesPropertiesFilter
  index: Int
}

input ComponentPropertiesElemMatchFilter {
  and: [ComponentPropertiesFilter]
  or: [ComponentPropertiesFilter]
  nor: [ComponentPropertiesFilter]
  not: ComponentPropertiesFilter
}

input ComponentPropertiesFilter {
  eq: NULL
  ne: NULL
  name: StringFilter
  value: StringFilter
  and: [ComponentPropertiesFilter]
  or: [ComponentPropertiesFilter]
  nor: [ComponentPropertiesFilter]
  not: ComponentPropertiesFilter
}

input ComponentPropertiesListFilter {
  list_index_filter: ComponentPropertiesListIndexFilter
  eq: NULL
  ne: NULL
  name: StringFilter
  value: StringFilter
  and: [ComponentPropertiesFilter]
  or: [ComponentPropertiesFilter]
  nor: [ComponentPropertiesFilter]
  not: ComponentPropertiesFilter
}

input ComponentPropertiesListIndexFilter {
  condition: ComponentPropertiesFilter
  index: Int
}

type ContainerFilePaginatedResponse {
  data: [ContainerFile]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

""""""
type ContainerFile {
  filename: String
  content: String
  key: String
}

input ContainerFileFilter {
  eq: NULL
  ne: NULL
  filename: StringFilter
  content: StringFilter
  key: StringFilter
  and: [ContainerFileFilter]
  or: [ContainerFileFilter]
  nor: [ContainerFileFilter]
  not: ContainerFileFilter
}

type ContainerTagHistoryPaginatedResponse {
  data: [ContainerTagHistory]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

input ContainerTagHistoryFilter {
  eq: NULL
  ne: NULL
  object_type: StringFilter
  registry: StringFilter
  repository: StringFilter
  tag: StringFilter
  tag_type: StringFilter
  history_size: IntFilter
  history_elemMatch: HistoryElemMatchFilter
  history: HistoryListFilter
  _id: ObjectIDFilter
  creation_date: DateTimeFilter
  last_update_date: DateTimeFilter
  and: [ContainerTagHistoryFilter]
  or: [ContainerTagHistoryFilter]
  nor: [ContainerTagHistoryFilter]
  not: ContainerTagHistoryFilter
}

input HistoryElemMatchFilter {
  and: [HistoryFilter]
  or: [HistoryFilter]
  nor: [HistoryFilter]
  not: HistoryFilter
}

input HistoryFilter {
  eq: NULL
  ne: NULL
  brew_build: StringFilter
  end_date: DateTimeFilter
  start_date: DateTimeFilter
  and: [HistoryFilter]
  or: [HistoryFilter]
  nor: [HistoryFilter]
  not: HistoryFilter
}

input HistoryListFilter {
  list_index_filter: HistoryListIndexFilter
  eq: NULL
  ne: NULL
  brew_build: StringFilter
  end_date: DateTimeFilter
  start_date: DateTimeFilter
  and: [HistoryFilter]
  or: [HistoryFilter]
  nor: [HistoryFilter]
  not: HistoryFilter
}

input HistoryListIndexFilter {
  condition: HistoryFilter
  index: Int
}

type CertProjectImageRequestResponse {
  data: CertProjectImageRequest
  error: ResponseError
}

type CertProjectTestResultResponse {
  data: CertProjectTestResult
  error: ResponseError
}

type CertProjectArtifactResponse {
  data: CertProjectArtifact
  error: ResponseError
}

type OperatorPackageResponse {
  data: OperatorPackage
  error: ResponseError
}

""""""
type OperatorPackage {
  """"""
  association: String

  """"""
  package_name: String

  """"""
  source: String

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime
  edges: OperatorPackageEdges
}

type OperatorPackageEdges {
  operator_bundle(page_size: Int = 50, page: Int = 0, filter: OperatorBundleFilter, sort_by: [SortBy]): OperatorBundlePaginatedResponse
}

type OperatorPackagePaginatedResponse {
  data: [OperatorPackage]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

input OperatorPackageFilter {
  eq: NULL
  ne: NULL
  association: StringFilter
  package_name: StringFilter
  source: StringFilter
  _id: ObjectIDFilter
  creation_date: DateTimeFilter
  last_update_date: DateTimeFilter
  and: [OperatorPackageFilter]
  or: [OperatorPackageFilter]
  nor: [OperatorPackageFilter]
  not: OperatorPackageFilter
}

type OperatorIndexResponse {
  data: OperatorIndex
  error: ResponseError
}

"""
List of operator indices from which operator bundle metadata are extracted to operatorBundles collection.
"""
type OperatorIndex {
  """OCP version, e.g. 4.5."""
  ocp_version: SemVer

  """Organization, as understood by iib, e.g. redhat-marketplace."""
  organization: String

  """
  The docker path used to pull this index container, e.g. quay.io/foo/bar:v4.5.
  """
  path: String

  """The date till the index image is valid"""
  end_of_life: DateTime

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime
}

type OperatorIndexPaginatedResponse {
  data: [OperatorIndex]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

input OperatorIndexFilter {
  eq: NULL
  ne: NULL
  ocp_version: SemVerFilter
  organization: StringFilter
  path: StringFilter
  end_of_life: DateTimeFilter
  _id: ObjectIDFilter
  creation_date: DateTimeFilter
  last_update_date: DateTimeFilter
  and: [OperatorIndexFilter]
  or: [OperatorIndexFilter]
  nor: [OperatorIndexFilter]
  not: OperatorIndexFilter
}

type RedHatContainerAdvisoryPaginatedResponse {
  data: [RedHatContainerAdvisory]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

input RedHatContainerAdvisoryFilter {
  eq: NULL
  ne: NULL
  _id: StringFilter
  content_type: StringFilter
  description: StringFilter
  object_type: StringFilter
  severity: StringFilter
  ship_date: DateTimeFilter
  solution: StringFilter
  synopsis: StringFilter
  topic: StringFilter
  type: StringFilter
  cves_size: IntFilter
  cves_elemMatch: CVEElemMatchFilter
  cves: CVEListFilter
  issues_size: IntFilter
  issues_elemMatch: IssueElemMatchFilter
  issues: IssueListFilter
  creation_date: DateTimeFilter
  last_update_date: DateTimeFilter
  and: [RedHatContainerAdvisoryFilter]
  or: [RedHatContainerAdvisoryFilter]
  nor: [RedHatContainerAdvisoryFilter]
  not: RedHatContainerAdvisoryFilter
}

input CVEElemMatchFilter {
  and: [CVEFilter]
  or: [CVEFilter]
  nor: [CVEFilter]
  not: CVEFilter
}

input CVEFilter {
  eq: NULL
  ne: NULL
  id: StringFilter
  url: URIFilter
  and: [CVEFilter]
  or: [CVEFilter]
  nor: [CVEFilter]
  not: CVEFilter
}

input CVEListFilter {
  list_index_filter: CVEListIndexFilter
  eq: NULL
  ne: NULL
  id: StringFilter
  url: URIFilter
  and: [CVEFilter]
  or: [CVEFilter]
  nor: [CVEFilter]
  not: CVEFilter
}

input CVEListIndexFilter {
  condition: CVEFilter
  index: Int
}

input IssueElemMatchFilter {
  and: [IssueFilter]
  or: [IssueFilter]
  nor: [IssueFilter]
  not: IssueFilter
}

input IssueFilter {
  eq: NULL
  ne: NULL
  id: StringFilter
  issue_tracker: StringFilter
  url: URIFilter
  and: [IssueFilter]
  or: [IssueFilter]
  nor: [IssueFilter]
  not: IssueFilter
}

input IssueListFilter {
  list_index_filter: IssueListIndexFilter
  eq: NULL
  ne: NULL
  id: StringFilter
  issue_tracker: StringFilter
  url: URIFilter
  and: [IssueFilter]
  or: [IssueFilter]
  nor: [IssueFilter]
  not: IssueFilter
}

input IssueListIndexFilter {
  condition: IssueFilter
  index: Int
}

type ContainerSignatureExternalPaginatedResponse {
  data: [ContainerSignatureExternal]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

"""Object for GraphQL response"""
type ContainerSignatureExternal {
  signature_data: String

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime
}

input ContainerSignatureExternalFilter {
  eq: NULL
  ne: NULL
  signature_data: StringFilter
  _id: ObjectIDFilter
  creation_date: DateTimeFilter
  last_update_date: DateTimeFilter
  and: [ContainerSignatureExternalFilter]
  or: [ContainerSignatureExternalFilter]
  nor: [ContainerSignatureExternalFilter]
  not: ContainerSignatureExternalFilter
}

type ContainerImageVulnerabilityResponse {
  data: ContainerImageVulnerability
  error: ResponseError
}

type RegistrySecretsResponse {
  data: RegistrySecrets
  error: ResponseError
}

"""Registry credentials."""
type RegistrySecrets {
  registry_credentials: RegistryCredentials

  """
  Docker config for operator registry projects. Value has to be a valid JSON.
  """
  docker_config_json: OpenPGPEncrypted
}

type ProductListingResponse {
  data: ProductListing
  error: ResponseError
}

type ApiKeyListResponse {
  data: [ApiKey]
  error: ResponseError
}

"""API key stored in Loki."""
type ApiKey {
  id: Int
  description: String
  company_id: Int
  created: DateTime
  last_used: DateTime
  created_by: String

  """
  Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  """
  org_id: Int

  """
  Red Hat username from Red Hat SSO of user who requested the API key creation.
  """
  created_on_behalf_of: String

  """
  Red Hat username from Red Hat SSO of user who last updated the API key.
  """
  updated_on_behalf_of: String
}

type ContainerGradesListResponse {
  data: [ContainerGrades]
  error: ResponseError
}

"""
Grades are describing security risk with containers that Red Hat provides through the Red Hat Ecosystem Catalog.
"""
type ContainerGrades {
  """Image architecture."""
  architecture: String

  """
  Current image security grade based on current date and grading schedule.
  """
  current_grade: String

  """
  the grade based on applicable updates and time provided by PST CVE engine.
  """
  freshness_grades: [FreshnessGrade]

  """Unique identifier for image."""
  image_id: String

  """A date when current grade drops."""
  next_drop_date: DateTime

  """Name of floating tag associated with the image."""
  tag: String
  edges: ContainerGradesEdges
}

type ContainerGradesEdges {
  image: ContainerImageResponse
}

type ContentManifestPaginatedResponse {
  data: [ContentManifest]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

input ContentManifestFilter {
  eq: NULL
  ne: NULL
  image: ContentManifestImageFilter
  components_size: IntFilter
  components_elemMatch: ContentManifestContentManifestComponentElemMatchFilter
  components: ContentManifestContentManifestComponentListFilter
  incompleteness_reasons_size: IntFilter
  incompleteness_reasons_elemMatch: ContentManifestIncompletenessReasonElemMatchFilter
  incompleteness_reasons: ContentManifestIncompletenessReasonListFilter
  org_id: IntFilter
  _id: ObjectIDFilter
  creation_date: DateTimeFilter
  last_update_date: DateTimeFilter
  and: [ContentManifestFilter]
  or: [ContentManifestFilter]
  nor: [ContentManifestFilter]
  not: ContentManifestFilter
}

input ContentManifestImageFilter {
  eq: NULL
  ne: NULL
  _id: ObjectIDFilter
  repositories_size: IntFilter
  repositories_elemMatch: ContentManifestImageRepositoryElemMatchFilter
  repositories: ContentManifestImageRepositoryListFilter
  and: [ContentManifestImageFilter]
  or: [ContentManifestImageFilter]
  nor: [ContentManifestImageFilter]
  not: ContentManifestImageFilter
}

input ContentManifestImageRepositoryElemMatchFilter {
  and: [ContentManifestImageRepositoryFilter]
  or: [ContentManifestImageRepositoryFilter]
  nor: [ContentManifestImageRepositoryFilter]
  not: ContentManifestImageRepositoryFilter
}

input ContentManifestImageRepositoryFilter {
  eq: NULL
  ne: NULL
  repository: StringFilter
  registry: StringFilter
  manifest_list_digest: StringFilter
  manifest_schema2_digest: StringFilter
  published: BooleanFilter
  and: [ContentManifestImageRepositoryFilter]
  or: [ContentManifestImageRepositoryFilter]
  nor: [ContentManifestImageRepositoryFilter]
  not: ContentManifestImageRepositoryFilter
}

input ContentManifestImageRepositoryListFilter {
  list_index_filter: ContentManifestImageRepositoryListIndexFilter
  eq: NULL
  ne: NULL
  repository: StringFilter
  registry: StringFilter
  manifest_list_digest: StringFilter
  manifest_schema2_digest: StringFilter
  published: BooleanFilter
  and: [ContentManifestImageRepositoryFilter]
  or: [ContentManifestImageRepositoryFilter]
  nor: [ContentManifestImageRepositoryFilter]
  not: ContentManifestImageRepositoryFilter
}

input ContentManifestImageRepositoryListIndexFilter {
  condition: ContentManifestImageRepositoryFilter
  index: Int
}

input ContentManifestContentManifestComponentElemMatchFilter {
  and: [ContentManifestContentManifestComponentFilter]
  or: [ContentManifestContentManifestComponentFilter]
  nor: [ContentManifestContentManifestComponentFilter]
  not: ContentManifestContentManifestComponentFilter
}

input ContentManifestContentManifestComponentFilter {
  eq: NULL
  ne: NULL
  _id: ObjectIDFilter
  type: StringFilter
  name: StringFilter
  version: StringFilter
  purl: StringFilter
  and: [ContentManifestContentManifestComponentFilter]
  or: [ContentManifestContentManifestComponentFilter]
  nor: [ContentManifestContentManifestComponentFilter]
  not: ContentManifestContentManifestComponentFilter
}

input ContentManifestContentManifestComponentListFilter {
  list_index_filter: ContentManifestContentManifestComponentListIndexFilter
  eq: NULL
  ne: NULL
  _id: ObjectIDFilter
  type: StringFilter
  name: StringFilter
  version: StringFilter
  purl: StringFilter
  and: [ContentManifestContentManifestComponentFilter]
  or: [ContentManifestContentManifestComponentFilter]
  nor: [ContentManifestContentManifestComponentFilter]
  not: ContentManifestContentManifestComponentFilter
}

input ContentManifestContentManifestComponentListIndexFilter {
  condition: ContentManifestContentManifestComponentFilter
  index: Int
}

input ContentManifestIncompletenessReasonElemMatchFilter {
  and: [ContentManifestIncompletenessReasonFilter]
  or: [ContentManifestIncompletenessReasonFilter]
  nor: [ContentManifestIncompletenessReasonFilter]
  not: ContentManifestIncompletenessReasonFilter
}

input ContentManifestIncompletenessReasonFilter {
  eq: NULL
  ne: NULL
  type: StringFilter
  description: StringFilter
  and: [ContentManifestIncompletenessReasonFilter]
  or: [ContentManifestIncompletenessReasonFilter]
  nor: [ContentManifestIncompletenessReasonFilter]
  not: ContentManifestIncompletenessReasonFilter
}

input ContentManifestIncompletenessReasonListFilter {
  list_index_filter: ContentManifestIncompletenessReasonListIndexFilter
  eq: NULL
  ne: NULL
  type: StringFilter
  description: StringFilter
  and: [ContentManifestIncompletenessReasonFilter]
  or: [ContentManifestIncompletenessReasonFilter]
  nor: [ContentManifestIncompletenessReasonFilter]
  not: ContentManifestIncompletenessReasonFilter
}

input ContentManifestIncompletenessReasonListIndexFilter {
  condition: ContentManifestIncompletenessReasonFilter
  index: Int
}

type ContentManifestComponentResponse {
  data: ContentManifestComponent
  error: ResponseError
}

type Mutation {
  """Create image."""
  create_image(input: ContainerImageInput): ContainerImageResponse

  """Update/Patch image."""
  update_image(id: ObjectIDFilterScalar, input: ContainerImageInput): ContainerImageResponse

  """Replace image."""
  replace_image(id: ObjectIDFilterScalar, input: ContainerImageInput): ContainerImageResponse

  """Replace container image by manifest digest."""
  replace_image_by_manifest_digest_registry_and_repository(registry: String, repository: String, manifest_digest: String, input: ContainerImageInput): ContainerImageResponse

  """Update container image by manifest digest."""
  update_image_by_manifest_digest_registry_and_repository(registry: String, repository: String, manifest_digest: String, input: ContainerImageInput): ContainerImageResponse

  """Update/Patch a RPM manifest by ID."""
  update_image_rpm_manifest(id: ObjectIDFilterScalar, input: ContainerImageRPMManifestInput): ContainerImageRPMManifestResponse

  """Replace/Put a RPM Manifest by ID."""
  replace_image_rpm_manifest(id: ObjectIDFilterScalar, input: ContainerImageRPMManifestInput): ContainerImageRPMManifestResponse

  """Create a new RPM manifest for an image."""
  create_image_rpm_manifest(id: String, input: ContainerImageRPMManifestInput): ContainerImageRPMManifestResponse

  """Create a certification project image request"""
  create_certification_project_image_request(id: ObjectIDFilterScalar, input: CertProjectImageRequestInput): CertProjectImageRequestResponse

  """Partially update a vendor."""
  update_vendor(id: ObjectIDFilterScalar, input: ContainerVendorInput): ContainerVendorResponse

  """Create a certification project."""
  create_certification_project(input: CertificationProjectInput): CertificationProjectResponse

  """Partially update a certification project."""
  update_certification_project(id: ObjectIDFilterScalar, input: CertificationProjectInput): CertificationProjectResponse

  """Update a certification project."""
  replace_certification_project(id: ObjectIDFilterScalar, input: CertificationProjectInput): CertificationProjectResponse

  """Replace product listing."""
  replace_product_listing(id: ObjectIDFilterScalar, input: ProductListingInput): ProductListingResponse

  """Update product listing."""
  update_product_listing(id: ObjectIDFilterScalar, input: ProductListingInput): ProductListingResponse

  """Create product listing."""
  create_product_listing(input: ProductListingInput): ProductListingResponse

  """Create an API key."""
  create_api_key(input: ApiKeyInput): ApiKeyResponse

  """Delete API key."""
  delete_api_key(key_id: Int): ApiKeyResponse

  """Create a certification project test result"""
  create_certification_project_test_result(id: ObjectIDFilterScalar, input: CertProjectTestResultInput): CertProjectTestResultResponse

  """Update/Patch certification project test result"""
  update_certification_project_test_result(id: ObjectIDFilterScalar, input: CertProjectTestResultInput): CertProjectTestResultResponse

  """Create a certification project artifact"""
  create_certification_project_artifact(id: ObjectIDFilterScalar, input: CertProjectArtifactInput): CertProjectArtifactResponse

  """Update/Patch a Content manifest component by ID."""
  update_content_manifest_component(id: ObjectIDFilterScalar, input: ContentManifestComponentInput): ContentManifestComponentResponse

  """Create a new Content Manifest Component for referenced Manifest."""
  create_content_manifest_component_for_manifest(id: ObjectIDFilterScalar, input: ContentManifestComponentInput): ContentManifestComponentResponse

  """Create a content manifest."""
  create_content_manifest(input: ContentManifestInput): ContentManifestResponse

  """Partially update a content manifest."""
  update_content_manifest(id: ObjectIDFilterScalar, input: ContentManifestInput): ContentManifestResponse
}

"""Metadata about images contained in RedHat and ISV repositories"""
input ContainerImageInput {
  """
  The field contains an architecture for which the container image was built for. Value is used to distinguish between the default x86-64 architecture and other architectures. If the value is not set, the image was built for the x86-64 architecture.
  """
  architecture: String

  """Brew related metadata."""
  brew: BrewInput

  """
  Indication that image was created by the CPaaS managed service pipeline.
  """
  cloud_service: Boolean

  """Subset of data from contentManifest."""
  content_manifest: ContainerImageContentManifestInput

  """
  Subset of data from components that belong to associated content manifest.
  """
  content_manifest_components: [ContainerImageContentManifestComponentInput]

  """
  A list of all content sets (YUM repositories) from where an image RPM content is.
  """
  content_sets: [String]

  """
  A mapping of applicable advisories to RPM NEVRA. This data is required for scoring.
  """
  cpe_ids: [String]

  """
  A mapping of applicable advisories for the base_images from the Red Hat repositories.
  """
  cpe_ids_rh_base_images: [String]

  """
  Docker Image Digest. For Docker 1.10+ this is also known as the 'manifest digest'.
  """
  docker_image_digest: String

  """
  Docker Image ID. For Docker 1.10+ this is also known as the 'config digest'.
  """
  docker_image_id: String

  """
  The grade based on applicable updates and time provided by PST CVE engine.
  """
  freshness_grades: [FreshnessGradeInput]
  object_type: String

  """
  Data parsed from image metadata.
  These fields are not computed from any other source.
  """
  parsed_data: ParsedDataInput

  """Published repositories associated with the container image."""
  repositories: [ContainerImageRepoInput]

  """Indication if the image was certified."""
  certified: Boolean

  """
  Indicates that an image was removed. Only unpublished images can be removed.
  """
  deleted: Boolean

  """
  Image manifest digest.
  Be careful, as this value is not unique among container image entries, as one image can be references several times.
  """
  image_id: String

  """
  ID of the project in for ISV repositories. The ID can be also used to connect vendor to the image.
  """
  isv_pid: String

  """
  The total size of the sum of all layers for each image in bytes. This is computed externally and may not match what is reported by the image metadata (see parsed_data.size).
  """
  sum_layer_size_bytes: Int64

  """Field for multiarch primary key"""
  top_layer_id: String

  """
  Hash (sha256) of the uncompressed top layer for this image (should be same value as - parsed_data.uncompressed_layer_sizes.0.layer_id)
  """
  uncompressed_top_layer_id: String

  """Raw image configuration, such as output from docker inspect."""
  raw_config: String

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime
}

"""Brew Build System related metadata."""
input BrewInput {
  """Unique and immutable Brew build ID."""
  build: String

  """Timestamp from Brew when the image has been succesfully built."""
  completion_date: DateTime

  """Multi-Arch primary key."""
  nvra: String

  """A package name in Brew."""
  package: String
}

""""""
input CertificationInput {
  assessment: [AssessmentInput]
}

""""""
input AssessmentInput {
  """Assesment name."""
  name: String

  """Indicates if the assessment is required for certification."""
  required_for_certification: Boolean

  """Indicates if the assesment was passed, True means yes."""
  value: Boolean
}

"""Subset of data from contentManifest."""
input ContainerImageContentManifestInput {
  """ID of the contentManifest."""
  _id: ObjectID
}

"""Subset of contentManifestComponent."""
input ContainerImageContentManifestComponentInput {
  """ID of the contentManifestComponent."""
  _id: ObjectID

  """ContentManifestComponent type."""
  type: String

  """Name of the contentManifestComponent."""
  name: String

  """Version of the contentManifestComponent."""
  version: String

  """Package URL of the contentManifestComponent."""
  purl: String
}

"""Grade based on applicable updates and time provided by PST CVE engine."""
input FreshnessGradeInput {
  """
  Date after which the grade is no longer valid. See start_date for when the grade was effective. If no value is set, the grade applies forever. This should happen only for a grade of A (no vulnerabilities) or grade F.
  """
  end_date: DateTime

  """The grade."""
  grade: String

  """Date when the grade was added by the vulnerability engine."""
  creation_date: DateTime

  """
  Date from which the grade is in effect. The grade is effective until the end_date, if end_date is set.
  """
  start_date: DateTime
}

""""""
input ParsedDataInput {
  architecture: String
  author: String
  command: String
  comment: String
  container: String

  """
  The 'created' date reported by image metadata. Stored as String because we do not have control on that format.
  """
  created: String
  docker_image_digest: String
  docker_image_id: String

  """Version of docker reported by 'docker inspect' for this image."""
  docker_version: String
  env_variables: [String]
  image_id: String
  labels: [LabelInput]

  """Layer digests from the image."""
  layers: [String]
  os: String
  ports: String

  """Repositories defined within an image as reported by yum command."""
  repos: [ParsedDataRepoInput]

  """Size of this image as reported by image metadata."""
  size: Int64

  """Information about uncompressed layer sizes."""
  uncompressed_layer_sizes: [UncompressedLayerSizeInput]

  """Uncompressed images size in bytes (sum of uncompressed layers size)."""
  uncompressed_size_bytes: Int64

  """The user on the images."""
  user: String

  """Virtual size of this image as reported by image metadata."""
  virtual_size: Int64
}

"""Image label."""
input LabelInput {
  """The name of the label"""
  name: String

  """Value of the label."""
  value: String
}

""""""
input ParsedDataRepoInput {
  baseurl: String
  expire: String
  filename: String
  id: String
  name: String
  pkgs: String
  size: String
  updated: String
}

""""""
input UncompressedLayerSizeInput {
  """The SHA256 layer ID."""
  layer_id: String

  """The uncompressed layer size in bytes."""
  size_bytes: Int64
}

""""""
input ContainerImageRepoInput {
  """Store information about image comparison."""
  comparison: ContainerImageRepoComparisonInput

  """
  The _id's of the redHatContainerAdvisory that contains the content advisories.
  """
  content_advisory_ids: [String]

  """
  The _id of the redHatContainerAdvisory that contains the image advisory.
  """
  image_advisory_id: String

  """Available for multiarch images."""
  manifest_list_digest: String

  """Available for single arch images."""
  manifest_schema2_digest: String

  """Indicate if the image has been published to the container catalog."""
  published: Boolean

  """Date the image was published to the container catalog."""
  published_date: DateTime

  """
  When the image was pushed to this repository. For RH images this is picked from first found of advisory ship_date, brew completion_date, and finally repositories publish_date. For ISV images this TBD but is probably going to be only sourced from publish_date but could come from parsed_data.created.
  """
  push_date: DateTime

  """Hostname of the registry where the repository can be accessed."""
  registry: String

  """Repository name."""
  repository: String

  """Image signing info."""
  signatures: [SignatureInfoInput]

  """List of container tags assigned to this layer."""
  tags: [ContainerImageRepoTagInput]
}

""""""
input ContainerImageRepoComparisonInput {
  """Mapping of a NVRA to multiple advisories IDs."""
  advisory_rpm_mapping: [ContainerImageRepoComparisonMappingInput]

  """Reason why 'with_nvr' is or is not null."""
  reason: String

  """Human readable reason."""
  reason_text: String

  """List of rpms grouped by category (new, remove, upgrade, downgrade)."""
  rpms: ContainerImageRepoComparisonRPMsInput

  """NVR of image which this image was compared with."""
  with_nvr: String
}

""""""
input ContainerImageRepoComparisonMappingInput {
  """Content advisory ID."""
  advisory_ids: [String]

  """NVRA of the RPM related to advisories."""
  nvra: String
}

""""""
input ContainerImageRepoComparisonRPMsInput {
  """List of NVRA which were downgraded in this image."""
  downgrade: [String]

  """List of NVRA which were added to this image."""
  new: [String]

  """List of NVRA which were removed in this image."""
  remove: [String]

  """List of NVRA which were upgraded in this image."""
  upgrade: [String]
}

""""""
input SignatureInfoInput {
  """The long 16-byte gpg key id."""
  key_long_id: String

  """List of image tags that are signed with the given key."""
  tags: [String]
}

""""""
input ContainerImageRepoTagInput {
  added_date: DateTime

  """Available when manifest_schema2_digest is not. All legacy images."""
  manifest_schema1_digest: String

  """The name of the tag."""
  name: String

  """
  Date this tag was removed from the image in this repo. If the tag is added back, add a new entry in 'tags' array.
  """
  removed_date: DateTime
}

"""
A containerImageRPMManifest contains all the RPM packages for a given containerImage
"""
input ContainerImageRPMManifestInput {
  """The foreign key to containerImage._id."""
  image_id: String
  object_type: String

  """Content manifest of this image. RPM content included in the image."""
  rpms: [RpmsItemsInput]

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime
}

"""RPM content of an image."""
input RpmsItemsInput {
  """RPM architecture."""
  architecture: String

  """GPG key used to sign the RPM."""
  gpg: String

  """RPM name."""
  name: String

  """RPM name, version, release, and architecture."""
  nvra: String

  """RPM release."""
  release: String

  """Source RPM name."""
  srpm_name: String

  """Source RPM NEVRA (name, epoch, version, release, architecture)."""
  srpm_nevra: String

  """RPM summary."""
  summary: String

  """RPM version."""
  version: String
}

"""Contain status and related metadata of a certProject image request."""
input CertProjectImageRequestInput {
  """Unique identifier for the certification project."""
  cert_project: ObjectID

  """Container image id associated with the image request."""
  image_id: ObjectID

  """Operation performed during the image request."""
  operation: String

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime

  """
  Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  """
  org_id: Int

  """The request status"""
  status: String

  """An explanatory message to a request status."""
  status_message: String
}

"""Stores information about a Vendor"""
input ContainerVendorInput {
  allow_hosted_container_registry: Boolean

  """URL to the vendor's main website."""
  company_url: URI

  """
  General contact information for the vendor, to be displayed on the vendor page on RHCC.
  """
  contact: ContainerVendorContactInput
  description: String

  """Company node ID from Red Hat Connect."""
  drupal_company_id: Int

  """The industry / vertical the vendor belongs to."""
  industries: [String]
  label: String

  """A flag that determines if vendor label can be changed."""
  label_locked: Boolean
  logo_url: URI
  name: String
  object_type: String

  """Indicate that the vendor has been published."""
  published: Boolean
  registry_urls: [String]

  """RSS feed for vendor."""
  rss_feed_url: URI

  """Token for outbound namespace for pulling published marketplace images."""
  service_account_token: String
  social_media_links: [ContainerVendorSocialMediaLinksInput]

  """
  Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  """
  org_id: Int

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime
}

"""Contact information"""
input ContainerVendorContactInput {
  """General contact email address."""
  email: String

  """General contact phone number."""
  phone: String
}

"""Social media links."""
input ContainerVendorSocialMediaLinksInput {
  """The name of the social media provider."""
  name: String

  """The URL to the social media site for the vendor."""
  url: URI
}

"""Certification project information."""
input CertificationProjectInput {
  """
  Value is derived from last_update_date field during when the certification project is published. Before it or if project is again unpublished, the value is null.
  """
  certification_date: DateTime

  """
  The certification project can be certified on several levels. This field determines whether the content was certified by ISV partner who followed official Red Hat certification, or by vendor validation.
  """
  certification_level: String

  """Certification Status."""
  certification_status: String

  """Certification User."""
  certification_user: Int

  """Contacts for certification project."""
  contacts: [CertProjectContactsInput]
  container: CertProjectContainerInput

  """Configuration specific to Helm Chart projects."""
  helm_chart: CertProjectHelmChartInput
  marketplace: CertProjectMarketplaceInput

  """The owner provided name of the certification project."""
  name: String
  non_container: CertProjectNonContainerInput

  """Operator Distribution."""
  operator_distribution: String

  """Configuration specific to OpenStack projects."""
  openstack: CertProjectOpenStackInput

  """
  Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  """
  org_id: Int

  """Unique identifier for the product listing."""
  product_listings: [ObjectID]

  """Status of the certification project."""
  project_status: String

  """Who published the certification project."""
  published_by: String
  redhat: CertProjectRedhatInput
  self_certification: CertProjectSelfCertificationInput

  """Special certifications specific to the certification platform"""
  badges: [String]

  """Certification project type."""
  type: String

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime

  """SSO username from the JWT - who created the entry or null if no JWT."""
  created_on_behalf_of: String

  """SSO username from the JWT - who updated the entry or null if no JWT."""
  updated_on_behalf_of: String
}

"""Contact info."""
input CertProjectContactsInput {
  email_address: Email
  type: String
}

"""Container related information."""
input CertProjectContainerInput {
  """The application categories (types)."""
  application_categories: [String]

  """
  Once a container is certified it is automatically published. Auto-publish must be enabled in order to set up automatic rebuilds. Auto-publish must always be enabled when auto-rebuilding is enabled.
  """
  auto_publish: Boolean

  """
  This value of this field is related to certProject.type field. See ISV-2012.
  """
  build_categories: String

  """Distribution approval obtained."""
  distribution_approval: Boolean

  """Distribution method."""
  distribution_method: String

  """ID of the project in for ISV repositories."""
  isv_pid: String

  """
  Kubernetes objects for operator registry projects. Value has to be a valid YAML.
  """
  kube_objects: OpenPGPEncrypted

  """
  Docker config for operator registry projects. Value has to be a valid JSON.
  """
  docker_config_json: OpenPGPEncrypted

  """OS Content Type."""
  os_content_type: String

  """Passed RH Cert."""
  passed_rhcert: Boolean

  """A container needs to run in a privileged state."""
  privileged: Boolean

  """Flag that indicates that project is using Red Hat hosted registry."""
  hosted_registry: Boolean

  """
  Hostname of the registry where the repository can be accessed.
  Examples: registry.company.com assumes the default port, 443. registry.company.com:5000 repository path with optional port specified.
  It is only applicable for projects with an 'external' distribution method.
  """
  registry: String
  registry_credentials: RegistryCredentialsInput

  """
  Note: These instructions will be displayed in the Red Hat Container Catalog as is. Please modify the following template as it suits your needs.
  """
  registry_override_instruct: String

  """Release category."""
  release_category: String

  """
  Path to the container repository as found in the registry.
  
  Examples:
  path/to/repository
  repository
  
  This field can only be edited when there are no published containers.
  It is only applicable for projects with an 'external' distribution method.
  """
  repository: String

  """
  The repository description is displayed on the container
  catalog repository overview page.
  """
  repository_description: String

  """
  This should represent your product (or the component if your product consists of multiple containers)
  and a major version. For example, you could use names like jboss-server7, or agent5.
  
  This value is only editable when there are no published containers in this project.
  It is only applicable for projects that do not have the 'external' distribution method.
  """
  repository_name: String

  """Short description of the container."""
  short_description: String

  """Supported Platforms."""
  support_platforms: [String]

  """
  Container type.
  Field is required, if project type is 'Container', and the field is immutable for Partners after creation.
  """
  type: String

  """GitHub users authorized to submit a certification pull request."""
  github_usernames: [String]
}

"""Registry credentials."""
input RegistryCredentialsInput {
  """Container registry username."""
  username: OpenPGPEncrypted

  """Container registry password."""
  password: OpenPGPEncrypted
}

"""Helm chart related information."""
input CertProjectHelmChartInput {
  """How your Helm Chart is distributed."""
  distribution_method: String

  """The Helm Chart name as it will appear in GitHub."""
  chart_name: String

  """
  URL to the externally distributed Helm Chart repository. This is not used if the chart is distributed via Red Hat.
  """
  repository: URI

  """Instructions for users to access an externally distributed Helm Chart."""
  distribution_instructions: String

  """Base64 encoded PGP public key. Used to sign result submissions."""
  public_pgp_key: Base64EncodedString

  """URL to the user submitted github pull request for this project."""
  github_pull_request: URI

  """Short description of the Helm Chart."""
  short_description: String

  """Long description of the Helm Chart."""
  long_description: String

  """The application categories (types)."""
  application_categories: [String]

  """OCP versions for this Helm Chart."""
  ocp_versions: [String]

  """GitHub users authorized to submit a certification pull request."""
  github_usernames: [String]
}

"""Drupal related information."""
input CertProjectDrupalInput {
  """Company node ID from Red Hat Connect."""
  company_id: Int

  """Relation ID for certification project."""
  relation: Int

  """Zone for certification project."""
  zone: String
}

"""Marketplace related information."""
input CertProjectMarketplaceInput {
  enablement_status: String
  enablement_url: URI
  listing_url: URI
  published: Boolean
}

"""Non-container project info."""
input CertProjectNonContainerInput {
  source_system_id: String
}

"""OpenStack related information."""
input CertProjectOpenStackInput {
  """OpenStack service type for test suite selection"""
  service: String
}

"""Red Hat projects related information."""
input CertProjectRedhatInput {
  """Red Hat Product ID."""
  product_id: Int

  """Red Hat product name."""
  product_name: String

  """Red Hat Product Version."""
  product_version: String

  """Red Hat Product Version."""
  product_version_id: Int
}

"""Red Hat projects related information."""
input CertProjectSelfCertificationInput {
  """Application Profiler."""
  app_profiler: Boolean

  """Application Runs on App Type."""
  app_runs_on_app_type: Boolean

  """Whether the Self Certification Evidence URL requires a customer login."""
  auth_login: Boolean

  """Self Certification Evidence URL."""
  certification_url: URI

  """Can Commercially Support on App Type."""
  comm_support_on_app_type: Boolean

  """Self Certification Requested."""
  requested: Boolean

  """TsaNET Member."""
  tsanet_member: Boolean
}

"""
Product listings define a marketing page in the Ecosystem Catalog. It allows you to group repos and showcase what they accomplish together as an application. In the case of operators, your CSV file populates OperatorHub, which can only be viewed in cluster through OpenShift. Your product listing is publicly visible in the Ecosystem Catalog so anyone can know that it is offered.
"""
input ProductListingInput {
  category: String

  """List of unique identifiers for the certification project."""
  cert_projects: [ObjectID]

  """
  List of contacts for the product listing. This field is required when the product listing is published.
  """
  contacts: [ContactsItemsInput]

  """This field is required when the product listing is published."""
  descriptions: DescriptionsInput

  """Company node ID from Red Hat Connect. Read only."""
  drupal_company_id: Int

  """FAQ section for the catalog page."""
  faqs: [FAQSItemsInput]

  """Features section for the catalog page."""
  features: [FeaturesItemsInput]

  """Indicates if the listing is eligible to be featured in Catalog."""
  focus_product: Boolean

  """This field is required when the product listing is published."""
  functional_categories: [String]

  """Information related to helm chart product listing."""
  helm_chart: ProductListingHelmChartInput
  legal: LegalInput

  """This field is required when the product listing is published."""
  linked_resources: [LinkedResourcesItemsInput]
  logo: LogoInput

  """This field is required when the product listing is published."""
  name: String

  """This field is required when the product listing is published."""
  published: Boolean

  """
  Flag determining if product listing is considered to be deleted. Product listing can be deleted only if it is not published. Value is set to False by default.
  """
  deleted: Boolean
  quick_start_configuration: QuickStartConfigurationInput

  """List of unique identifiers for the repository."""
  repositories: [ObjectID]

  """List of search aliases for Solr."""
  search_aliases: [SearchAliasesItemsInput]

  """This field is required when the product listing is published."""
  support: SupportInput

  """List of target platforms for the product listing."""
  target_platforms: [String]

  """This field is required when the product listing is published."""
  type: String
  vendor_label: String
  operator_bundles: [OperatorBundlesItemsInput]

  """
  Special certifications specific to the certification platform. The value is given by attached certification projects which are published.
  """
  certification_badges: [String]

  """
  Special certifications specific to the certification platform. The value is given by all attached certification projects with any certification_level.
  """
  certification_badges_all: [String]

  """
  The product listing content can be certified on several levels. This field determines whether the content was certified by Red Hat itself, by an ISV partner who followed official Red Hat certification, or by vendor validation.
  """
  certification_level: String

  """List of industries to which the product listing belongs."""
  industries: [String]

  """
  Determine a way how a product is deployed, based only on published projects.
  """
  deployed_as: [String]

  """
  Determine a way how a product is deployed, based on all projects with any certification_status.
  """
  deployed_as_all: [String]

  """
  Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  """
  org_id: Int

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime
}

""""""
input BadgesItemsInput {
  badge: String
  project_id: ObjectID
}

""""""
input ContactsItemsInput {
  email_address: Email
  type: String
}

"""This field is required when the product listing is published."""
input DescriptionsInput {
  long: String
  short: String
}

"""This field is required when the product listing is published."""
input FAQSItemsInput {
  answer: String
  question: String
}

"""This field is required when the product listing is published."""
input FeaturesItemsInput {
  description: String
  title: String
}

""""""
input ProductListingHelmChartInput {
  """OCP versions for this helm chart."""
  ocp_versions: [String]
}

""""""
input LegalInput {
  description: String
  license_agreement_url: URI
  privacy_policy_url: URI
}

""""""
input LinkedResourcesItemsInput {
  category: String
  description: String
  thumbnail_url: URI
  title: String
  type: String
  url: URI
}

""""""
input LogoInput {
  url: URI
}

""""""
input MarketplaceInput {
  enablement_status: String
  enablement_url: URI
  listing_url: URI
  published: Boolean
}

""""""
input QuickStartConfigurationInput {
  instructions: String

  """
  A flag indicating whether a product uses a default instruction for deployment.
  """
  default_deploy_instructions: Boolean
}

""""""
input SearchAliasesItemsInput {
  key: String
  value: String
}

"""This field is required when the product listing is published."""
input SupportInput {
  description: String
  email_address: Email
  phone_number: String
  url: URI
}

""""""
input OperatorBundlesItemsInput {
  """Bundle unique identifier"""
  _id: ObjectID

  """Bundle package name"""
  package: String
  capabilities: [String]

  """Specific OCP version for this bundle, e.g. \"4.5\"."""
  ocp_version: SemVer

  """
  A subset of the \"metadata.annotations\" object from the CSV. Any annotations that are in the \"operators.openshift.io\" namespace that are strings of JSON will be expanded if it is valid JSON. Namespaces are not preserved due to their usage of special characters and all dashes are converted to underscores for consistency with other fields.
  """
  annotations: OperatorBundleAnnotationInput
}

"""
A subset of the \"metadata.annotations\" object from the CSV. Any annotations that are in the \"operators.openshift.io\" namespace that are strings of JSON will be expanded if it is valid JSON. Namespaces are not preserved due to their usage of special characters and all dashes are converted to underscores for consistency with other fields.
"""
input OperatorBundleAnnotationInput {
  """
  The deserialized value of operators.openshift.io/infrastructure-features. This defaults to an empty array.
  """
  infrastructure_features: [String]

  """
  The deserialized value of operators.openshift.io/valid-subscription. This defaults to an empty array.
  """
  valid_subscription: [String]
}

""""""
type ApiKeyResponse {
  api_key: String
  key_data: ApiKey
}

"""API key stored in Loki."""
input ApiKeyInput {
  id: Int
  description: String
  company_id: Int
  created: DateTime
  last_used: DateTime
  created_by: String

  """
  Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  """
  org_id: Int

  """
  Red Hat username from Red Hat SSO of user who requested the API key creation.
  """
  created_on_behalf_of: String

  """
  Red Hat username from Red Hat SSO of user who last updated the API key.
  """
  updated_on_behalf_of: String
}

"""Contain certification test results of related certProject"""
input CertProjectTestResultInput {
  """Unique identifier for the certification project."""
  cert_project: ObjectID

  """Hashed content for the certification project."""
  certification_hash: String

  """Image associated with the test result."""
  image: String

  """Operator package name associated with the test result."""
  operator_package_name: String

  """Whether or not the test has passed overall."""
  passed: Boolean

  """Identifier of container image collection."""
  image_id: ObjectID

  """The test results stored in lists based on result status."""
  results: ResultsInput

  """The test library of the test result."""
  test_library: TestLibraryInput

  """Version associated with the content tested."""
  version: String

  """Pull request of certification test results"""
  pull_request: PullRequestInput

  """A platform where tests were executed."""
  tested_on: TestedOnInput

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime

  """
  Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  """
  org_id: Int
}

"""The test results stored in lists based on result status."""
input ResultsInput {
  """Test results of cert project certification"""
  failed: [TestResultsInput]

  """Test results of cert project certification"""
  errors: [TestResultsInput]

  """Test results of cert project certification"""
  passed: [TestResultsInput]
}

"""The cert project pipeline test result."""
input TestResultsInput {
  check_url: URI
  description: String
  elapsed_time: Float
  help: String
  knowledgebase_url: URI
  name: String
  suggestion: String
}

"""The test library of the test result."""
input TestLibraryInput {
  commit: String
  name: String
  version: String
}

"""Pull request of certification test results."""
input PullRequestInput {
  """Pull request URL"""
  url: URI

  """Pull request identifier"""
  id: Int

  """Pull request status"""
  status: String
}

"""A platform where tests were executed."""
input TestedOnInput {
  name: String
  version: String
}

"""
Contains the logs from the preflight test results from operator pipelines project
"""
input CertProjectArtifactInput {
  """Cert Project Identifier."""
  cert_project: ObjectID

  """Content version."""
  version: String

  """The operator package name of the cert project artifact."""
  operator_package_name: String

  """The cert project hashed content."""
  certification_hash: String

  """Identifier of container image collection."""
  image_id: ObjectID

  """Base64 encoded the cert project artifact content."""
  content: Base64EncodedString

  """The content type associated with the content type."""
  content_type: String

  """The file name associated with the content test results."""
  filename: String

  """File size in bytes."""
  file_size: Int64

  """URL to the Github pull request associated with with cert project."""
  pull_request_url: URI

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime

  """
  Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  """
  org_id: Int
}

"""
Stores software and hardware components associated with image manifests. Structure is based on the CycloneDX component. Link: https://cyclonedx.org/docs/1.4/json/#components
"""
input ContentManifestComponentInput {
  """
  Specifies the type of component. For software components, classify as 'application' if no more specific appropriate classification is available or cannot be determined for the component.
  """
  type: String

  """
  Associated manifest. Manifest cannot be disassociated after creating association with component.
  """
  content_manifest: ContentManifestComponentManifestInput

  """
  Data are synchronized upon association or when data in manifest or associated image changes.
  """
  image: ContentManifestComponentImageInput

  """
  When used on file components, the mime-type can provide additional context about the kind of file being represented such as an image, font, or executable. Some library or framework components may also have an associated mime-type.
  """
  mime_type: String

  """
  An identifier which can be used to reference the component elsewhere in the BOM. Uniqueness within the BOM is ensured checking unique combination od manifest._id and bom_ref.
  """
  bom_ref: String

  """
  The organization that supplied the component. The supplier may often be the manufacturer, but may also be a distributor or repackager.
  """
  supplier: SupplierInput

  """The person(s) or organization(s) that authored the component."""
  author: String

  """The person(s) or organization(s) that published the component."""
  publisher: String

  """
  The grouping name or identifier. This will often be a shortened, single name of the company or project that produced the component, or the source package or domain name. Whitespace and special characters should be avoided. Examples: apache, org.apache.commons, and apache.org.
  """
  group: String

  """
  The name of the component. This will often be a shortened, single name of the component. Examples: commons-lang3 and jquery
  """
  name: String

  """
  The component version. The version should ideally comply with semantic versioning but is not enforced.
  """
  version: String

  """Specifies a description for the component."""
  description: String

  """Specifies the scope of the component."""
  scope: String

  """Hashes of the component."""
  hashes: [ComponentHashInput]

  """Licenses of the component."""
  licenses: [ComponentLicenseInput]

  """
  A copyright notice informing users of the underlying claims to copyright ownership in a published work.
  """
  copyright: String

  """
  Specifies the package-url (purl). The purl, if specified, MUST be valid and conform to the specification defined at: https://github.com/package-url/purl-spec
  """
  purl: String

  """
  Specifies metadata and content for ISO-IEC 19770-2 Software Identification (SWID) Tags. https://www.iso.org/standard/65666.html
  """
  swid: ComponentSwidInput

  """
  External references provide a way to document systems, sites, and information that may be relevant but which are not included with the BOM.
  """
  external_references: [ComponentExternalReferenceInput]

  """
  Provides the ability to document evidence collected through various forms of extraction or analysis.
  """
  evidence: ComponentEvidenceInput

  """Specifies optional release notes."""
  release_notes: ComponentReleaseNotesInput

  """
  Defines if the container is used as a build dependency during multi-stage builds.
  """
  build_dependency: Boolean

  """
  Provides the ability to document properties in a name-value store. This provides flexibility to include data not officially supported in the standard without having to use additional namespaces or create extensions. Unlike key-value stores, properties support duplicate names, each potentially having different values. Property names of interest to the general public are encouraged to be registered in the CycloneDX Property Taxonomy (https://github.com/CycloneDX/cyclonedx-property-taxonomy). Formal registration is OPTIONAL.
  """
  properties: [ComponentPropertiesInput]

  """
  Specifies a well-formed CPE name that conforms to the CPE 2.2 or 2.3 specification. See https://nvd.nist.gov/products/cpe
  """
  cpe: String

  """
  Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  """
  org_id: Int

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime
}

"""
Associated manifest. Manifest cannot be disassociated after creating association. Placeholder for embedding data from Manifest.
"""
input ContentManifestComponentManifestInput {
  """MongoDB unique _id"""
  _id: ObjectID
}

"""Embedded image data."""
input ContentManifestComponentImageInput {
  """MongoDB unique _id"""
  _id: ObjectID

  """Repositories associated with the container image."""
  repositories: [ContentManifestComponentImageRepositoryInput]
}

"""List of embedded images data"""
input ContentManifestComponentImageRepositoryInput {
  """Indicate if the image has been published to the container catalog."""
  published: Boolean

  """Hostname of the registry where the repository can be accessed."""
  registry: String

  """Repository name."""
  repository: String

  """Available for multiarch images."""
  manifest_list_digest: String

  """Available for single arch images."""
  manifest_schema2_digest: String
}

"""
The organization that supplied the component. The supplier may often be the manufacturer, but may also be a distributor or repackager.
"""
input SupplierInput {
  """The name of the organization."""
  name: String

  """The URL of the organization."""
  url: [URI]

  """A contact at the organization."""
  contact: SupplierContactInput
}

"""A contact at the organization."""
input SupplierContactInput {
  """The name of a contact."""
  name: String

  """The email address of the contact."""
  email: Email

  """The phone number of the contact."""
  phone: String
}

"""Component hash."""
input ComponentHashInput {
  """Hash algorithm."""
  alg: String

  """Hash."""
  content: String
}

"""Component license."""
input ComponentLicenseInput {
  """License data."""
  license: LicenseInput
}

"""License data."""
input LicenseInput {
  """Optional license name."""
  name: String

  """An optional way to include the textual content of a license."""
  text: ComponentLicenseTextInput

  """
  The URL to the license file. If specified, a 'license' externalReference should also be specified for completeness.
  """
  url: URI

  """A valid SPDX license ID."""
  id: String
}

"""An optional way to include the textual content of a license."""
input ComponentLicenseTextInput {
  """
  Specifies the content type of the text. Defaults to text/plain if not specified.
  """
  content_type: String

  """Specifies the optional encoding the text is represented in."""
  encoding: String

  """
  The attachment data. Proactive controls such as input validation and sanitization should be employed to prevent misuse of attachment text.
  """
  content: String
}

"""
Specifies metadata and content for ISO-IEC 19770-2 Software Identification (SWID) Tags. https://www.iso.org/standard/65666.html
"""
input ComponentSwidInput {
  """Maps to the tagId of a softwareIdentity"""
  tag_id: String

  """Maps to the name of a SoftwareIdentity."""
  name: String

  """Maps to the version of a SoftwareIdentity"""
  version: String

  """Maps to the tagVersion of a SoftwareIdentity"""
  tag_version: Int

  """Maps to the patch of a SoftwareIdentity"""
  patch: Boolean

  """Specifies the metadata and content of the SWID tag."""
  text: SwidTextInput

  """The URL to the SWID file."""
  url: URI
}

"""Specifies the metadata and content of the SWID tag."""
input SwidTextInput {
  """
  Specifies the content type of the text. Defaults to text/plain if not specified.
  """
  content_type: String

  """Specifies the optional encoding the text is represented in."""
  encoding: String

  """
  The attachment data. Proactive controls such as input validation and sanitization should be employed to prevent misuse of attachment text.
  """
  content: String
}

"""
External references provide a way to document systems, sites, and information that may be relevant but which are not included with the BOM.
"""
input ComponentExternalReferenceInput {
  """The URL to the external reference."""
  url: String

  """An optional comment describing the external reference."""
  comment: String

  """
  Specifies the type of external reference. There are built-in types to describe common references. If a type does not exist for the reference being referred to, use the other type.
  """
  type: String

  """The hashes of the external reference (if applicable)."""
  hashes: [ExternalReferenceHashInput]
}

"""The hash of the external reference."""
input ExternalReferenceHashInput {
  """Hash algorithm."""
  alg: String

  """Hash."""
  content: String
}

"""
Provides the ability to document evidence collected through various forms of extraction or analysis.
"""
input ComponentEvidenceInput {
  """Component evidence license data."""
  licenses: [ComponentEvidenceLicensesInput]

  """Component evidence copyright data."""
  copyright: [ComponentEvidenceCopyrightInput]
}

"""Component evidence license data."""
input ComponentEvidenceLicensesInput {
  """License data."""
  license: EvidenceLicensesLicenseInput
}

"""Component evidence license data."""
input EvidenceLicensesLicenseInput {
  """
  If SPDX does not define the license, this field provides the license name.
  """
  name: String

  """An optional way to include the textual content of a license,"""
  text: EvidenceLicenseTextInput

  """
  The URL to the license file. If specified, a 'license' externalReference should also be specified for completeness.
  """
  url: URI

  """A valid SPDX license ID."""
  id: String
}

"""An optional way to include the textual content of a license."""
input EvidenceLicenseTextInput {
  """
  Specifies the content type of the text. Defaults to text/plain if not specified.
  """
  content_type: String

  """Specifies the optional encoding the text is represented in."""
  encoding: String

  """
  The attachment data. Proactive controls such as input validation and sanitization should be employed to prevent misuse of attachment text.
  """
  content: String
}

"""Copyright data."""
input ComponentEvidenceCopyrightInput {
  """Copyright text."""
  text: String
}

"""Specifies optional release notes."""
input ComponentReleaseNotesInput {
  """The software versioning type the release note describes."""
  type: String

  """The title of the release."""
  title: String

  """
  The URL to an image that may be prominently displayed with the release note.
  """
  featured_image: URI

  """
  The URL to an image that may be used in messaging on a social media platforms.
  """
  social_image: URI

  """A short description of the release."""
  description: String

  """The date and time (timestamp) when the release note was created."""
  timestamp: String

  """
  One or more alternate names the release may be referred to. This may include unofficial terms used by development and marketing teams (e.g. code names).
  """
  aliases: [String]

  """
  One or more tags that may aid in search or retrieval of the release note.
  """
  tags: [String]

  """A collection of issues that have been resolved."""
  resolves: [ReleaseNotesResolvesInput]

  """
  Zero or more release notes containing the locale and content. Multiple note objects may be specified to support release notes in a wide variety of languages.
  """
  notes: [ReleaseNotesNotesInput]

  """
  Provides the ability to document properties in a name-value store. This provides flexibility to include data not officially supported in the standard without having to use additional namespaces or create extensions. Unlike key-value stores, properties support duplicate names, each potentially having different values. Property names of interest to the general public are encouraged to be registered in the CycloneDX Property Taxonomy. Formal registration is OPTIONAL.
  """
  properties: [ReleaseNotesPropertiesInput]
}

"""An individual issue that has been resolved."""
input ReleaseNotesResolvesInput {
  """Specifies the type of issue."""
  type: String

  """The identifier of the issue assigned by the source of the issue."""
  id: String

  """The name of the issue."""
  name: String

  """A description of the issue."""
  description: String

  """The source of the issue where it is documented."""
  source: ReleaseNotesResolvesSourceInput

  """A collection of URLs for the reference. Multiple URLs are allowed."""
  references: [URI]
}

"""The source of the issue where it is documented."""
input ReleaseNotesResolvesSourceInput {
  """
  The name of the source. For example 'National Vulnerability Database', 'NVD', and 'Apache'
  """
  name: String

  """The url of the issue documentation as provided by the source."""
  url: URI
}

"""A note containing the locale and content."""
input ReleaseNotesNotesInput {
  """
  The ISO-639 (or higher) language code and optional ISO-3166 (or higher) country code. Examples include: \"en\", \"en-US\", \"fr\" and \"fr-CA\".
  """
  locale: String

  """Specifies the full content of the release note."""
  text: ReleaseNotesTextInput
}

"""Specifies the full content of the release note."""
input ReleaseNotesTextInput {
  """
  Specifies the content type of the text. Defaults to text/plain if not specified.
  """
  content_type: String

  """Specifies the optional encoding the text is represented in."""
  encoding: String

  """
  The attachment data. Proactive controls such as input validation and sanitization should be employed to prevent misuse of attachment text.
  """
  content: String
}

"""
Provides the ability to document properties in a name-value store. This provides flexibility to include data not officially supported in the standard without having to use additional namespaces or create extensions. Unlike key-value stores, properties support duplicate names, each potentially having different values. Property names of interest to the general public are encouraged to be registered in the CycloneDX Property Taxonomy. Formal registration is OPTIONAL.
"""
input ReleaseNotesPropertiesInput {
  """
  The name of the property. Duplicate names are allowed, each potentially having a different value.
  """
  name: String

  """The value of the property."""
  value: String
}

"""
Provides the ability to document properties in a name-value store. This provides flexibility to include data not officially supported in the standard without having to use additional namespaces or create extensions. Unlike key-value stores, properties support duplicate names, each potentially having different values. Property names of interest to the general public are encouraged to be registered in the CycloneDX Property Taxonomy (https://github.com/CycloneDX/cyclonedx-property-taxonomy). Formal registration is OPTIONAL.
"""
input ComponentPropertiesInput {
  """
  The name of the property. Duplicate names are allowed, each potentially having a different value.
  """
  name: String

  """The value of the property."""
  value: String
}

"""Stores a content manifest"""
input ContentManifestInput {
  """Associated container image."""
  image: ContentManifestImageInput

  """Associated components"""
  components: [ContentManifestContentManifestComponentInput]

  """Reasons for manifest incompleteness."""
  incompleteness_reasons: [ContentManifestIncompletenessReasonInput]

  """
  Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  """
  org_id: Int

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime
}

"""Image manifest"""
input ContentManifestImageInput {
  """ID of the image."""
  _id: ObjectID

  """Subset of data from containerImage."""
  repositories: [ContentManifestImageRepositoryInput]
}

"""Container image repository details"""
input ContentManifestImageRepositoryInput {
  """Repository name."""
  repository: String

  """Hostname of the registry where the repository can be accessed."""
  registry: String

  """Available for multiarch images."""
  manifest_list_digest: String

  """Available for single arch images."""
  manifest_schema2_digest: String

  """Indicate if the image has been published to the container catalog."""
  published: Boolean
}

"""Subset of contentManifestComponent."""
input ContentManifestContentManifestComponentInput {
  """ID of the content manifest component."""
  _id: ObjectID

  """
  Type of the component. Classify as application if no more specific appropriate classification is available or cannot be determined for the component.
  """
  type: String

  """
  Name of the component. This will often be a shortened, single name of the component.
  """
  name: String

  """
  Version of the component. The version should ideally comply with semantic versioning but is not enforced.
  """
  version: String

  """
  Package URL of the component. If specified, MUST be valid and conform to the specification defined at https://github.com/package-url/purl-spec.
  """
  purl: String
}

"""Reason of ContentManifest incompleteness."""
input ContentManifestIncompletenessReasonInput {
  """Type of incompleteness reason."""
  type: String

  """Description of the incompleteness reason."""
  description: String
}
